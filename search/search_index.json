{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230\u6211\u76842025\u6691\u671f\u5b66\u4e60\u4e4b\u65c5","text":"<p>\u63d0\u793a</p> <p>\u70b9\u51fb\u53f3\u4e0a\u89d2/,\u5373\u53ef\u5207\u6362\u4eae\u8272\u6216\u6697\u8272\u6a21\u5f0f\uff08\u4e2a\u4eba\u559c\u6b22\u4eae\u8272\uff09</p> <p>\u4f60\u597d\uff0c\u6211\u662f \u82cf\u6613\u6587,\u6b22\u8fce\u6765\u5230\u6211\u7684\u6691\u671f\u5b66\u4e60\u8bb0\u5f55\u7f51\u7ad9\u3002</p> <p>\u8fd9\u662f\u6211\u4e3a\u4e86\u8bb0\u5f55\u57282025\u5e74\u6691\u5047\u671f\u95f4\uff0c\u4e3a\u4ece\u6750\u6599\u79d1\u5b66\u4e0e\u5de5\u7a0b\u4e13\u4e1a\u8f6c\u5411\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a\u6240\u505a\u7684\u5b66\u4e60\u548c\u52aa\u529b\u800c\u521b\u5efa\u7684\u7f51\u7ad9\u3002</p> \u7279\u522b\u6ce8\u610f <p>\u672c\u4eba\u4e0e2025\u5e747\u67085\u65e5\u6b63\u5f0f\u642d\u5efa\u8be5\u7f51\u7ad9\uff0c\u5b58\u5728\u8bf8\u591a\u95ee\u9898\uff0c\u6240\u4ee5\u4ec5\u9762\u5411\u5404\u4f4d\u4eb2\u53cb\u5f00\u653e\uff0c\u540e\u7eed\u4f1a\u8fdb\u4e00\u6b65\u8fdb\u884c\u4f18\u5316\uff0c\u5728\u6b64\u4e4b\u524d\u8bf7\u4e0d\u8981\u5916\u4f20\uff0c\u8c22\u8c22\uff01</p>"},{"location":"#_1","title":"\u5feb\u901f\u5bfc\u822a","text":"<p>\u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u6211\u5728\u5404\u4e2a\u65b9\u5411\u4e0a\u7684\u5b66\u4e60\u7b14\u8bb0\u548c\u9879\u76ee\u53cd\u601d\uff1a</p> <ul> <li>\u7b97\u6cd5\u5b66\u4e60: \u524d\u5f80 <code>01-Algorithms</code></li> <li>HPC \u5b9e\u9a8c: \u524d\u5f80 <code>02-HPC</code></li> <li>\u968f\u7b14\u4e0e\u601d\u8003: \u524d\u5f80 <code>03-Notes-and-Thoughts</code></li> </ul>"},{"location":"01-Algorithms/","title":"\u524d\u8a00","text":"<p>\u867d\u7136\u672c\u4eba\u5728\u9ad8\u4e2d\u65f6\u671f\u9009\u4fee\u6280\u672f\uff0c\u5e76\u5bf9<code>python</code>\u8fdb\u884c\u4e86\u5b66\u4e60\uff0c\u4f46\u662f\u6ca1\u6709\u7ecf\u5386\u8fc7\u9ad8\u5f3a\u5ea6\u7684\u7ade\u8d5b\u8bad\u7ec3\uff0c\u6240\u4ee5\u5728\u7b97\u6cd5\u5c42\u9762\u7684\u80fd\u529b\u4e0d\u591f\u7a81\u51fa\uff0c\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u8ba1\u5212\u5728\u8fd9\u4e2a\u6691\u5047\u7cfb\u7edf\u6027\u7684\u5b66\u4e60\u4e00\u4e0b\u7b97\u6cd5\u76f8\u5173\u7684\u77e5\u8bc6\uff0c\u5e76\u5728<code>LeetCode</code>\u4e0a\u8fdb\u884c\u5237\u9898\u6765\u5de9\u56fa\u5b66\u4e60\u5230\u7684\u77e5\u8bc6\u70b9\u3002 \u672c\u90e8\u5206\u8bb0\u5f55\u7684\u6211\u5237\u7684\u90e8\u5206\u6709\u4ef7\u503c\u7684\u9898\u76ee\uff0c\u5e76\u9644\u4e0a\u4e86\u53cd\u601d\u4e0e\u603b\u7ed3\uff0c\u5e0c\u671b\u80fd\u52a0\u6df1\u81ea\u5df1\u5bf9\u4e0d\u540c\u7b97\u6cd5\u7684\u7406\u89e3\uff0c\u4e5f\u65b9\u4fbf\u672a\u6765\u7684\u56de\u987e\u3002</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode101%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/","title":"leetcode101\u5bf9\u79f0\u4e8c\u53c9\u6811","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c \u68c0\u67e5\u5b83\u662f\u5426\u8f74\u5bf9\u79f0\u3002</p> <p>\u793a\u4f8b 1: </p> <p>\u8f93\u5165\uff1aroot = [1,2,2,3,4,4,3] \u8f93\u51fa\uff1atrue</p> <p>\u793a\u4f8b 2:</p> <p>\u8f93\u5165\uff1aroot = [1,2,2,null,3,null,3] \u8f93\u51fa\uff1afalse</p> <p>\u8fd9\u9053\u9898\u4e3b\u8981\u5c31\u662f\u627e\u5230\u5408\u7406\u7684\u9012\u5f52\u6761\u4ef6\uff0c\u4e3a\u6b64\u6211\u4eec\u9700\u8981\u5bf9\u95ee\u9898\u8fdb\u884c\u7565\u5fae\u7684\u8f6c\u5316\uff0c\u6216\u8005\u8bf4\u7b49\u4ef7\u66ff\u6362\uff1a \u5224\u65ad\u4e00\u68f5\u6811\u662f\u5426\u5bf9\u79f0  -&gt;  \u5982\u4f55\u5224\u65ad\u6811A\u548c\u6811B\u662f\u5426\u4e92\u4e3a\u955c\u50cf\uff1f \u5982\u6b64\u4e00\u6765\u5c31\u7b80\u5355\u4e86\uff0cA\u548cB \u955c\u50cf\u9700\u8981\u6ee1\u8db3\u4e09\u4e2a\u6761\u4ef6\uff1a 1.A\u548cB\u7684\u6839\u8282\u70b9\u7684\u503c\u76f8\u7b49 2.A\u7684\u5de6\u5b50\u6811\u548cB\u7684\u53f3\u5b50\u6811\u955c\u50cf 3.A\u7684\u53f3\u5b50\u6811\u548cB\u7684\u5de6\u5b50\u6811\u955c\u50cf \u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u8f7b\u6613\u7684\u5199\u51fa\u4ee3\u7801\uff1a <pre><code>// \u8f85\u52a9\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u4e24\u68f5\u6811 t1 \u548c t2 \u662f\u5426\u4e92\u4e3a\u955c\u50cf\nbool isMirror(struct TreeNode* t1, struct TreeNode* t2) {\n    // \u57fa\u7ebf\u6761\u4ef61\uff1a\u5982\u679c\u4e24\u4e2a\u90fd\u662f\u7a7a\uff0c\u90a3\u5b83\u4eec\u80af\u5b9a\u662f\u955c\u50cf\u3002\n    if (t1 == NULL &amp;&amp; t2 == NULL) {\n        return true;\n    }\n\n    // \u57fa\u7ebf\u6761\u4ef62\uff1a\u5982\u679c\u4e00\u4e2a\u7a7a\u4e00\u4e2a\u4e0d\u7a7a\uff0c\u90a3\u80af\u5b9a\u4e0d\u662f\u955c\u50cf\u3002\n    if (t1 == NULL || t2 == NULL) {\n        return false;\n    }\n\n    // \u9012\u5f52\u6b65\u9aa4\uff1a\n    // 1. \u4e24\u4e2a\u6839\u8282\u70b9\u7684\u503c\u5fc5\u987b\u76f8\u7b49\n    // 2. t1\u7684\u5de6\u5b50\u6811\u5fc5\u987b\u548ct2\u7684\u53f3\u5b50\u6811\u4e92\u4e3a\u955c\u50cf\n    // 3. t1\u7684\u53f3\u5b50\u6811\u5fc5\u987b\u548ct2\u7684\u5de6\u5b50\u6811\u4e92\u4e3a\u955c\u50cf\n    // \u8fd9\u4e09\u4e2a\u6761\u4ef6\u5fc5\u987b\u540c\u65f6\u6210\u7acb\uff01\n    return (t1-&gt;val == t2-&gt;val)\n        &amp;&amp; isMirror(t1-&gt;left, t2-&gt;right)\n        &amp;&amp; isMirror(t1-&gt;right, t2-&gt;left);\n}\n\n// \u4e3b\u51fd\u6570\nbool isSymmetric(struct TreeNode* root) {\n    // \u5982\u679c\u6811\u662f\u7a7a\u7684\uff0c\u90a3\u5b83\u5c31\u662f\u5bf9\u79f0\u7684\n    if (root == NULL) {\n        return true;\n    }\n    // \u5426\u5219\uff0c\u5224\u65ad\u5b83\u7684\u5de6\u53f3\u5b50\u6811\u662f\u4e0d\u662f\u4e92\u4e3a\u955c\u50cf\n    return isMirror(root-&gt;left, root-&gt;right);\n}\n</code></pre> \u4ece\u8fd9\u9053\u9898\u5b66\u5230\u7684\u77e5\u8bc6\u4e3b\u8981\u662f\u5bf9\u95ee\u9898\u8fdb\u884c\u7b49\u4ef7\u66ff\u6362\u6765\u5bfb\u627e\u53ef\u80fd\u5b58\u5728\u7684\u9012\u5f52\u5173\u7cfb</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode102/","title":"leetcode.102\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684 \u5c42\u5e8f\u904d\u5386 \u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002</p> <p>\u793a\u4f8b 1: </p> <p>\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7] \u8f93\u51fa\uff1a[[3],[9,20],[15,7]]</p> <p>\u793a\u4f8b 2:</p> <p>\u8f93\u5165\uff1aroot = [1] \u8f93\u51fa\uff1a[[1]]</p> <p>\u793a\u4f8b 3:</p> <p>\u8f93\u5165\uff1aroot = [] \u8f93\u51fa\uff1a[]</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode102/#_1","title":"\u65b9\u6cd5\u4e00\uff0c\u611f\u89c9\u5f88\u5dee\u52b2 \uff1a","text":"<p>\u76f4\u63a5\u5c31\u5ffd\u7565\u4e86\u6811\u8fd9\u4e2a\u7ed3\u6784\uff0c\u76f4\u63a5\u628a\u8f93\u5165\u5f53\u6210\u4e00\u4e2a\u6570\u7ec4\u3002\u7531\u4e8e\u6211\u4eec\u6709<code>returnsize</code>\u548c<code>returnColumnSizes</code>\u8fd9\u4e24\u4e2a\u53d8\u91cf\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u6765\u7b97\u51fa\u8282\u70b9\u7684\u4e2a\u6570\uff0c\u7136\u540e\u987a\u5e8f\u904d\u5386root\u6570\u7ec4\uff0c\u6bcf\u68c0\u6d4b\u5230\u4e00\u4e2a\u975e\u7a7a\u8282\u70b9\u5c31\u81ea\u589ecnt\uff0c\u7136\u540e\u628a\u8be5\u8282\u70b9\u6dfb\u52a0\u5230<code>result[*returnsize_idx][(*returncolumnsizes)[i++]]</code>\u91cc\uff0c\u5e76\u4e14\u5f53<code>i=**returnColumnSizes</code>\u65f6\u5c31\u4ee4<code>i=0</code>\uff0c<code>(*returnsize_idx)++</code>,\u4e00\u76f4\u5faa\u73af\u76f4\u5230<code>*returnsize_idx==*returnsize&amp;&amp;i==**returnColumnSizes.</code>\u663e\u7136\uff0c\u8fd9\u79cd\u65b9\u6cd5\u70c2\u5230\u7206\u70b8\uff0c\u5b8c\u5168\u6ca1\u6709\u7528\u6811\u8fd9\u79cd\u4f18\u79c0\u7684\u6570\u636e\u7ed3\u6784\uff0c\u83dc\u9e1f\u624d\u4f1a\u8fd9\u6837\u505a</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode102/#_2","title":"\u65b9\u6cd5\u4e8c\uff0c\u5e7f\u5ea6\u4f18\u5148\uff1a","text":"<pre><code>*int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n\n  struct TreeNode** quene =(struct TreeNode** )malloc(sizeof(struct TreeNode*)*2001);\n  int** result=(int **)malloc(sizeof(int *)*2001);\n  int i=0,j=0;\n  int front=0,rear=0;\n  struct TreeNode* cur=root;\n  quene[rear++]=cur;  //\u5148\u5c06\u6839\u8282\u70b9\u5165\u961f\n  while(i &lt; *returnSize &amp;&amp; j &lt; *(returnColumnSizes[i])){\n    cur=quene[front++];  //\u51fa\u961f\n    if(cur!=NULL){\n     result[i][j++]=cur-&gt;val;\n      if(j== *(returnColumnSizes[i])){\n        j=0;\n        i++;\n      }\n    }\n      quene[rear++]=cur-&gt;left;\n\n    quene[rear++]=cur-&gt;right;\n  }\n  return result;\n}\n</code></pre> <p>\u53d1\u73b0\u4e00\u4e2a\u95ee\u9898\uff0c<code>int* returnSize</code>, <code>int** returnColumnSizes</code>\u8fd9\u4e24\u4e2a\u53d8\u91cf\u597d\u50cf\u90fd\u662f\u672a\u77e5\u7684\uff0c\u662f\u9700\u8981\u6211\u4eec\u8fd4\u56de\u7684\uff0c\u9760\uff01\u90a3\u600e\u4e48\u529e\uff1f\u6ca1\u5173\u7cfb\uff0c\u9996\u5148\u6700\u5916\u5c42\u8fd8\u662f\u4e00\u4e2a<code>while</code>\u5faa\u73af\uff0c\u7ec8\u6b62\u6761\u4ef6\u53d8\u4e3a\u961f\u5217\u4e3a\u7a7a\uff0c\u53ea\u8981\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u6211\u4eec\u5c31\u51fa\u961f\uff0c\u5982\u679c\u961f\u9996\u5143\u7d20\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48<code>result[i][j++]=cur-&gt;val</code>,\u90a3\u4e48i\u4ec0\u4e48\u65f6\u5019\u589e\u5927\uff0cj\u4ec0\u4e48\u65f6\u5019\u6e05\u96f6\u5462\uff0c\u663e\u7136\uff0c\u6b64\u65f6j\u4ee3\u8868\u7684\u662f\u6700\u7ec8\u7ed3\u679c\u7684\u6570\u7ec4\u7684\u7d22\u5f15\uff0c\u4e0d\u80fd\u7528\u4e8e\u5224\u65adi\u662f\u5426\u8981\u589e\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u6b64\u65f6\u53ef\u4ee5\u65b0\u7ef4\u62a4\u4e00\u4e2a<code>cnt</code>\u53d8\u91cf\uff0c\u7528\u4e8e\u8ba1\u7b97\u7b2c<code>i</code>\u5c42\u5df2\u7ecf\u8bbf\u95ee\u7684\u8282\u70b9\u6570\uff0c\u5e76\u4e14\u65e0\u8bba\u961f\u9996\u5143\u7d20\u662f\u5426\u4e3a\u7a7a\uff0c<code>cnt</code>\u90fd\u8981\u81ea\u589e\uff0c\u5982\u679c\u81ea\u589e\u540e<code>cnt==2**i</code>\uff0c\u90a3\u4e48\u8bf4\u660e\u8be5\u5c42\u5df2\u7ecf\u8bbf\u95ee\u5b8c\u6bd5\uff0c\u4ee4<code>i++</code>,<code>j=0</code>;</p> <p>\u4e8e\u662f\u6211\u505a\u51fa\u4e86\u4e0b\u9762\u7684\u4fee\u6539\uff1a</p> <pre><code>int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n    struct TreeNode** quene =(struct TreeNode** )malloc(sizeof(struct TreeNode*)*2001);\n    int** result=(int **)malloc(sizeof(int *)*2001);\n    int i=0,j=0;\n    int front=0,rear=0;\n    int cnt=0;\n    struct TreeNode* cur=root;\n    quene[rear++]=cur;  //\u5148\u5c06\u6839\u8282\u70b9\u5165\u961f\n    while(front != rear){\n        cur=quene[front++];  //\u51fa\u961f\n        cnt++;\n        if(cur!=NULL){\n            result[i]=(int *)malloc(sizeof(int)*2001);\n            result[i][j++]=cur-&gt;val;\n            *(returnColumnSizes[i])+=1;\n            if(cnt == pow(2,i)){\n                j=0;\n                i++;\n                cnt=0;\n                (*returnSize)++;\n            }\n        quene[rear++]=cur-&gt;left;\n        quene[rear++]=cur-&gt;right;\n        }\n        if(cnt == pow(2,i)){\n                j=0;\n                i++;\n                cnt=0;\n                (*returnSize)++;\n            }\n    }\n    return result;\n</code></pre> <p>\u4f46\u662f\u4ecd\u7136\u662f\u5b8c\u5168\u9519\u8bef\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u51b3\u5b9a\u653e\u5f03\u5728\u8fd9\u4e2a\u9519\u8bef\u4e0a\u7ee7\u7eed\u4fee\u8865\uff0c\u800c\u662f\u65b0\u5f00\u4e00\u79cd\u505a\u6cd5\uff0c\u91c7\u7528\u5c42\u5e8f\u904d\u5386\u7684\u6807\u51c6\u8303\u5f0f:</p> <pre><code>int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n    if(root==NULL){\n        return NULL;\n    }\n    struct TreeNode* cur=root;\n    struct TreeNode** quene=(struct TreeNode**)malloc(sizeof(struct TreeNode*)*2001);\n    int front = 0,rear = 0;\n    int level=0;\n    int ** result=(int **)malloc(sizeof(int *)*2001);\n    quene[rear++]=cur;\n    while(front!=rear){\n        int num=rear-front;//\u8ba1\u7b97\u8be5\u5c42\u6709\u591a\u5c11\u4e2a\u8282\u70b9\n        result[level]=(int *)malloc(sizeof(int )*num);\n        (*returnColumnSizes)[level]=num; //\u5fc5\u987b\u5148\u89e3\u5f15\u7528\uff0c\u518d\u8bbf\u95ee\uff01\uff01\uff01&lt;----------------\u5c24\u5176\u6ce8\u610f\uff01\uff01\uff01\uff01\uff01\n        for(int i=0;i&lt;num;i++){\n            //\u628a\u4e0b\u4e00\u5c42\u7684\u6240\u6709\u8282\u70b9\u5168\u90e8\u52a0\u5165\u961f\u5217\n            if(cur-&gt;left!=NULL){\n            quene[rear++]=cur-&gt;left;\n            }\n             if(cur-&gt;right!=NULL){\n            quene[rear++]=cur-&gt;right;\n            }\n            //\u987a\u4fbf\u5c42\u5e8f\u8f93\u51fa\n            result[level][i]=quene[front++]-&gt;val;\n            cur=quene[front];\n        }\n\n        level++;\n\n    }\n    *returnSize = level;\n    return result;\n</code></pre> <p>\u4e0a\u9762\u7684\u4ee3\u7801\u6709\u4e00\u4e2a\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u5730\u65b9\uff0c\u5c31\u662f<code>(*returnColumnSizes)[level]=num</code>\u8fd9\u4e2a\u4e1c\u897f\u5fc5\u987b\u8981\u8fd9\u6837\u5199\uff0c\u56e0\u4e3a\u8981\u5148\u89e3\u5f15\u7528\u518d\u8bbf\u95ee\uff0c\u5e76\u4e14\u7531\u4e8e[]\u7684\u4f18\u5148\u7ea7\u6bd4*\u9ad8\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u52a0\u4e0a\u62ec\u5f27\u624d\u884c\uff01</p> <p>\u4f46\u662f\u4f9d\u7136\u9519\u6389\u4e86\uff0c\u4e3a\u4ec0\u4e48\uff1f\uff1a</p> <p>1.\u6211\u7684\u7a0b\u5e8f\u4f1a\u7acb\u523b\u5d29\u6e83\u3002<code>(*returnColumnCases)[level]=num</code>;\u88ab\u6267\u884c\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u5f53\u573a\u66b4\u6bd9\u3002</p> <p>\u4e3a\u4ec0\u4e48\uff1f\u56e0\u4e3a\u6211\u4ece\u6765\u6ca1\u6709\u7ed9 <code>*returnColumnSizes</code>\u5206\u914d\u8fc7\u5185\u5b58\uff01</p> <p>\u4ece\u51fd\u6570\u53c2\u6570\u91cc\u6536\u5230\u7684 <code>int** returnColumnSizes</code> \u662f\u4e00\u4e2a\u6307\u5411\u4e00\u4e2a<code>int*</code>\u6307\u9488\u7684\u6307\u9488\u3002\u90a3\u4e2a<code>int*</code>\u6307\u9488\u672c\u8eab\uff0c\u5728\u88ab\u4f20\u8fdb\u6765\u7684\u65f6\u5019\uff0c\u662f\u4e2a\u91ce\u6307\u9488\uff0c\u5b83\u4ec0\u4e48\u90fd\u6ca1\u6307\u5411\uff01\u5fc5\u987b\u5148\u8ba9\u5b83\u6307\u5411\u4e00\u5757\u7528<code>malloc</code>\u7533\u8bf7\u7684\u3001\u5b9e\u5b9e\u5728\u5728\u7684\u5185\u5b58\uff0c\u7136\u540e\u624d\u80fd\u5f80\u90a3\u5757\u5185\u5b58\u91cc\u5199\u4e1c\u897f\uff01</p> <p>\u5728<code>while</code>\u5faa\u73af\u5f00\u59cb\u4e4b\u524d\uff0c\u5c31\u5e94\u8be5\u6709\u4e00\u884c\uff1a<code>*returnColumnSizes = (int*)malloc(sizeof(int) * 2001);</code></p> <p>2.\u4f7f\u7528cur\uff0c\u4f1a\u5bfc\u81f4\u6700\u540e\u4e00\u6b21\u51fa\u73b0\u95ee\u9898\uff0c\u4ece\u800c\u51fa\u73b0\u66f4\u5927\u7684\u95ee\u9898</p> <p>\u4e0b\u9762\u76f4\u63a5\u7ed9\u51fa\u6700\u597d\u7684\u3001\u6700\u6807\u51c6\u7684\u5199\u6cd5\uff1a</p> <pre><code>int** levelOrder(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {\n    if (root == NULL) {\n        *returnSize = 0; // \u5fc5\u987b\u7ed9 returnSize \u8d4b\u503c\uff01\n        return NULL;\n    }    \n    // \u52a8\u6001\u6570\u7ec4\u6700\u5927\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u6839\u636e\u9898\u76ee\u9650\u5236\u8c03\u6574\n    int MALLOC_SIZE = 2001; \n    // \u5173\u952e\uff1a\u5728\u5faa\u73af\u5f00\u59cb\u524d\uff0c\u4e3a\u5217\u6570\u6570\u7ec4\u672c\u8eab\u5206\u914d\u5185\u5b58\uff01\n    *returnColumnSizes = (int*)malloc(sizeof(int) * MALLOC_SIZE);    \n    int** result = (int**)malloc(sizeof(int*) * MALLOC_SIZE);\n    struct TreeNode** queue = (struct TreeNode**)malloc(sizeof(struct TreeNode*) * MALLOC_SIZE);\n    int front = 0, rear = 0;\n    int level = 0;  \n    queue[rear++] = root;\n    while (front != rear) {\n        int level_size = rear - front;       \n        result[level] = (int*)malloc(sizeof(int) * level_size);\n        (*returnColumnSizes)[level] = level_size; // \u6b63\u786e\u7684\u8d4b\u503c\n        // \u6b63\u786e\u7684\u5faa\u73af\u903b\u8f91\uff01\n        for (int i = 0; i &lt; level_size; i++) {\n            // 1. \u6bcf\u8f6e\u53ea\u51fa\u961f\u4e00\u6b21\uff0c\u5b58\u5165\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\n            struct TreeNode* node = queue[front++];         \n            // 2. \u7528\u8fd9\u4e2a\u4e34\u65f6\u53d8\u91cf\u5b8c\u6210\u6240\u6709\u4e8b\n            result[level][i] = node-&gt;val;\n            if (node-&gt;left) {\n                queue[rear++] = node-&gt;left;\n            }\n            if (node-&gt;right) {\n                queue[rear++] = node-&gt;right;\n            }\n        }\n        level++;\n    }\n    *returnSize = level; // \u5728\u6700\u540e\uff0c\u62a5\u544a\u603b\u5c42\u6570\n    free(queue); // \u91ca\u653e\u4e34\u65f6\u961f\u5217\n    return result;\n}\n</code></pre> <p>\u4e3a\u4ec0\u4e48\u5199\u7684\u66f4\u597d\uff1f</p> <p>\u6838\u5fc3\u533a\u522b\uff1a\u5faa\u73af\u5904\u7406\u903b\u8f91\u7684\u201c\u7cbe\u795e\u5206\u88c2\u201d vs \u201c\u4e95\u7136\u6709\u5e8f\u201d</p> <p>\u8fd9\u662f\u6211\u4ee3\u7801\u80fd\u8dd1\u548c\u4e0d\u80fd\u8dd1\u7684\u6839\u672c\u539f\u56e0\u3002</p> <p>\u707e\u96be\u73b0\u573a :</p> <pre><code>// \u5728for\u5faa\u73af\u5f00\u59cb\u524d\uff0ccur\u662f\u5f53\u524d\u5c42\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u6bd4\u5982\u8282\u70b9A\nfor(int i=0; i&lt;num; i++){\n    // \u7528\u8282\u70b9A\u7684\u5de6\u53f3\u5b69\u5b50\u53bb\u5165\u961f\n    if(cur-&gt;left!=NULL){...} \n    if(cur-&gt;right!=NULL){...}\n\n    // \u7136\u540e\u53c8\u628a\u961f\u5934\u7684\u8282\u70b9\uff08\u7b2c\u4e00\u6b21\u662fA\uff0c\u7b2c\u4e8c\u6b21\u662fB\uff09\u7684\u503c\u53d6\u51fa\u6765\n    result[level][i]=quene[front++]-&gt;val; \n\n    // \u6700\u540e\u53c8\u628acur\u66f4\u65b0\u6210\u4e86\u961f\u91cc\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9B\n    cur=quene[front];\n}\n</code></pre> <p>\u5206\u6790\u8fd9\u5768\u5c4e\uff1a \u5728<code>for</code>\u5faa\u73af\u7684\u6bcf\u4e00\u6b21\u8fed\u4ee3\u91cc\uff0c\u6211\u90fd\u7528\u540c\u4e00\u4e2a<code>cur</code>\uff08\u56e0\u4e3a<code>cur</code>\u53ea\u5728\u5faa\u73af\u7684\u6700\u540e\u624d\u66f4\u65b0\uff0c\u4e0b\u4e00\u8f6e\u5faa\u73af\u5f00\u59cb\u65f6\u624d\u80fd\u7528\u4e0a\u65b0\u7684\u503c\uff09\u53bb\u5224\u65ad<code>left</code>\u548c<code>right</code>\u3002\u4f46\u4f60\u5904\u7406<code>val</code>\u548c\u51fa\u961f\u7684\u53c8\u662f<code>queue[front]</code>\u3002</p> <ul> <li><code>i=0</code>\u65f6\uff1a<code>cur</code>\u662f\u8282\u70b9A\u3002\u628aA\u7684\u5b69\u5b50\u5165\u961f\uff0c\u7136\u540e\u5904\u7406A\u7684\u503c\u3002\u7136\u540e<code>cur</code>\u53d8\u6210\u4e86\u8282\u70b9B\u3002</li> <li><code>i=1</code>\u65f6\uff1a<code>cur</code>\u662f\u8282\u70b9B\u3002\u628aB\u7684\u5b69\u5b50\u5165\u961f\uff0c\u7136\u540e\u5904\u7406B\u7684\u503c\u3002 \u8fd9\u770b\u8d77\u6765\u597d\u50cf\u6ca1\u4ec0\u4e48\u95ee\u9898\uff1f\u95ee\u9898\u5927\u4e86\uff01 \u6211\u90a3\u4e2a\u539f\u59cb\u4ee3\u7801\u91cc\uff0c<code>cur</code>\u7684\u66f4\u65b0\u662f\u5728\u5faa\u73af\u91cc\u7684\uff0c\u4f46\u662f\u5b83\u7684\u6765\u6e90\u5728\u5faa\u73af\u5916\u3002\u6574\u4e2a\u903b\u8f91\u662f\u62e7\u5df4\u7684\u3001\u4e11\u964b\u7684\u3001\u6781\u6613\u51fa\u9519\u7684\uff01\u6700\u81f4\u547d\u7684\u662f\u4e0a\u6b21\u8bf4\u7684\u5d29\u6e83\u95ee\u9898\uff0c\u5fd8\u4e86\u5417\uff1f\u5904\u7406\u5b8c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c<code>quene[front]</code>\u5c31\u662f\u975e\u6cd5\u8bbf\u95ee\uff01</li> </ul> <p>\u80fd\u8dd1\u7684\u4ee3\u7801 (The Code That Runs):</p> <pre><code>for (int i = 0; i &lt; level_size; i++) {\n    // 1. \u5148\u4ece\u961f\u5217\u91cc\u635e\u4e00\u4e2a\u8282\u70b9\u51fa\u6765\uff0c\u9501\u6b7b\u5b83\uff01\n    struct TreeNode* node = queue[front++];\n\n    // 2. \u4e4b\u540e\u7684\u6240\u6709\u64cd\u4f5c\uff0c\u90fd\u53ea\u9488\u5bf9\u8fd9\u4e00\u4e2a\u635e\u51fa\u6765\u7684node\n    result[level][i] = node-&gt;val;\n\n    if (node-&gt;left) {\n        queue[rear++] = node-&gt;left;\n    }\n    if (node-&gt;right) {\n        queue[rear++] = node-&gt;right;\n    }\n}\n</code></pre> <p>\u6e05\u6670\u7684\u903b\u8f91 \u6bcf\u4e00\u8f6e<code>for</code>\u5faa\u73af\uff0c\u5b83\u7684\u4efb\u52a1\u6781\u5176\u5355\u7eaf\uff1a</p> <ol> <li>\u4ece\u961f\u5934\u53d6\u51fa\u4e00\u4e2a\u8282\u70b9\uff0c\u547d\u540d\u4e3a<code>node</code>\u3002</li> <li>\u628a<code>node</code>\u7684\u503c\u5b58\u8d77\u6765\u3002</li> <li>\u628a<code>node</code>\u7684\u5b69\u5b50\uff08\u5982\u679c\u6709\u7684\u8bdd\uff09\u585e\u8fdb\u961f\u5c3e\u3002</li> <li>\u5b8c\u4e8b\u3002\u4e0b\u4e00\u8f6e\u5faa\u73af\u4f1a\u53d6\u51fa\u4e0b\u4e00\u4e2a\u5168\u65b0\u7684<code>node</code>\u3002</li> </ol> <p>\u4e00\u7801\u5f52\u4e00\u7801\uff01 \u53d8\u91cf<code>node</code>\u7684\u751f\u547d\u5468\u671f\u548c\u4f5c\u7528\u57df\u5c31\u5728\u8fd9\u4e00\u6b21\u5faa\u73af\u91cc\uff0c\u5b83\u53ea\u8d1f\u8d23\u4e00\u4e2a\u8282\u70b9\u3002\u4e0d\u50cf\u4f60\u90a3\u4e2a\u6df7\u4e71\u7684<code>cur</code>\uff0c\u6ee1\u573a\u98de\uff0c\u81ea\u5df1\u90fd\u4e0d\u77e5\u9053\u81ea\u5df1\u662f\u8c01\u3002</p> <p>\u8fd0\u884c\u548c\u5d29\u6e83\u7684\u533a\u522b\uff1a\u4f1a\u4e0d\u4f1a\u628a\u81ea\u5df1\u73a9\u6b7b</p> <p>\u6211\u7684\u4ee3\u7801\u4f1a100%\u5d29\u6e83\uff0c\u800c\u80fd\u8dd1\u7684\u4ee3\u7801\u4e0d\u4f1a\u3002</p> <ul> <li>\u6211\u7684\u4ee3\u7801\u600e\u4e48\u6b7b\u7684\uff1a \u5f53\u5904\u7406\u4e00\u5c42\u4e2d\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u65f6\uff08<code>i = level_size - 1</code>\uff09\uff0c\u5728 <code>result[level][i]=quene[front++]-&gt;val;</code> \u6267\u884c\u540e\uff0c<code>front</code> \u5c31\u7b49\u4e8e <code>rear</code> \u4e86\u3002\u7136\u540e\u4f60\u4ed6\u5988\u5149\u8363\u5730\u6267\u884c\u4e86 <code>cur=quene[front];</code>\uff0c\u8fd9\u7b49\u4e8e\u8bbf\u95ee\u4e86\u961f\u5217\u5916\u7684\u5783\u573e\u5185\u5b58\u3002\u4e0b\u4e00\u8f6e <code>while</code> \u5faa\u73af\u5224\u65ad <code>cur-&gt;left</code> \u65f6\uff0cBOOM\uff01 \u6bb5\u9519\u8bef\uff0c\u7a0b\u5e8f\u5f53\u573a\u66b4\u6bd9\u3002</li> <li>\u80fd\u8dd1\u7684\u4ee3\u7801\u4e3a\u4ec0\u4e48\u6d3b\u7740\uff1a \u5b83\u6839\u672c\u6ca1\u6709 <code>cur=quene[front];</code> \u8fd9\u884c\u753b\u86c7\u6dfb\u8db3\u7684\u5e9f\u8bdd\u3002<code>for</code>\u5faa\u73af\u5904\u7406\u5b8c\u5f53\u524d\u5c42\u7684\u6240\u6709\u8282\u70b9\u540e\uff0c\u5c31\u81ea\u7136\u7ed3\u675f\u3002<code>front</code>\u548c<code>rear</code>\u7684\u503c\u90fd\u662f\u5408\u6cd5\u7684\uff0c<code>while(front != rear)</code> \u8fd9\u4e2a\u6761\u4ef6\u81ea\u7136\u4f1a\u5904\u7406\u4e0b\u4e00\u5c42\u6216\u8005\u7ed3\u675f\u5faa\u73af\u3002\u5b83\u6839\u672c\u6ca1\u673a\u4f1a\u53bb\u8bbf\u95ee\u975e\u6cd5\u5185\u5b58\u3002</li> </ul> <p>\u7a0d\u5fae\u4e0d\u90a3\u4e48\u8822\u7684\u533a\u522b\uff1a\u7a7a\u6811\u5904\u7406</p> <p>\u8fd9\u90fd\u5c5e\u4e8e\u7ec6\u8282\uff0c\u4f46\u9762\u8bd5\u5b98\u5c31\u770b\u8fd9\u4e2a\u3002</p> <ul> <li>\u6211\u7684\u539f\u59cb\u4ee3\u7801\uff08\u7b2c\u4e00\u7248\uff09\uff1a <code>if(root==NULL) return NULL;</code> \u4f60\u6839\u672c\u6ca1\u7ed9 <code>*returnSize</code> \u8d4b\u503c\u3002\u8c03\u7528\u8005\u62ff\u5230\u4e00\u4e2a<code>NULL</code>\uff0c\u4f46\u4ed6\u4e0d\u77e5\u9053\u8fd4\u56de\u7684\u6570\u7ec4\u5927\u5c0f\u662f\u591a\u5c11\uff0c<code>*returnSize</code>\u91cc\u7684\u503c\u662f\u968f\u673a\u7684\u5783\u573e\u503c\u3002</li> <li>\u8fd9\u6bb5\u80fd\u8dd1\u7684\u4ee3\u7801\uff1a <code>if (root == NULL) { *returnSize = 0; return NULL; }</code> \u8fd9\u7a0d\u5fae\u597d\u4e00\u70b9\u3002\u5b83\u660e\u786e\u544a\u8bc9\u8c03\u7528\u8005\uff0c\u8fd4\u56de\u7684\u6570\u7ec4\u5927\u5c0f\u662f<code>0</code>\u3002\u8c03\u7528\u8005\u53ef\u4ee5\u5b89\u5168\u5730\u68c0\u67e5 <code>*returnSize</code>\uff0c\u4e00\u770b\u662f0\uff0c\u5c31\u77e5\u9053\u4e0d\u7528\u5904\u7406\u8fd4\u56de\u7684<code>NULL</code>\u6307\u9488\u4e86\u3002\u867d\u7136\u6700\u5b8c\u7f8e\u7684\u505a\u6cd5\u662f\u8fd4\u56de\u4e00\u4e2a\u5927\u5c0f\u4e3a0\u7684\u3001\u975e<code>NULL</code>\u7684 <code>malloc</code> \u51fa\u6765\u7684\u6307\u9488\uff0c\u4f46\u8fd9\u4e2a\u5199\u6cd5\u81f3\u5c11\u4e0d\u4f1a\u7ed9\u8c03\u7528\u8005\u6316\u5751\u3002</li> </ul>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode102/#_3","title":"\u53cd\u601d","text":"<p>\u8fd9\u662f\u4eca\u5929\u6700\u60e8\u75db\u7684\u6559\u8bad\uff1a\u6211\u56fa\u6267\u5730\u575a\u6301\u81ea\u5df1\u90a3\u4e2a\u57fa\u4e8e<code>pow(2, i)</code>\u7684\u9519\u8bef\u7b97\u6cd5\uff0c\u5728\u4e0a\u9762\u6d6a\u8d39\u4e86\u6570\u5c0f\u65f6\u8fdb\u884c\u65e0\u6548\u7684\u4fee\u8865\u3002\u6559\u8bad\uff1a \u6211\u5fc5\u987b\u5b66\u4f1a\u66f4\u5feb\u5730\u8bc6\u522b\u548c\u653e\u5f03\u8d70\u4e0d\u901a\u7684\u601d\u8def\u3002\u4e00\u4e2a\u5de5\u7a0b\u5e08\u7684\u91cd\u8981\u7279\u8d28\uff0c\u662f\u62e5\u6709\u629b\u5f03\u81ea\u5df1\u4eb2\u624b\u5199\u7684\u70c2\u4ee3\u7801\u7684\u52c7\u6c14\u3002\u627f\u8ba4\u9519\u8bef\u3001\u63a8\u5012\u91cd\u6765\uff0c\u8fdc\u6bd4\u5728\u9519\u8bef\u7684\u5730\u57fa\u4e0a\u6dfb\u7816\u52a0\u74e6\u8981\u9ad8\u6548\u5f97\u591a\u3002</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode141%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/","title":"leetcode141\u9898 \u73af\u5f62\u94fe\u8868","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>head</code> \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002</p> <p>\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a <code>next</code> \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 <code>pos</code> \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c <code>pos</code> \u662f <code>-1</code>\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\u6ce8\u610f\uff1a<code>pos</code> \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002</p> <p>\u4e0d\u5141\u8bb8\u4fee\u6539 \u94fe\u8868\u3002</p> <p>\u793a\u4f8b 1\uff1a </p> <p>\u8f93\u5165\uff1ahead = [3,2,0,-4], pos = 1 \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e8c\u4e2a\u8282\u70b9\u3002</p> <p>\u793a\u4f8b 2\uff1a </p> <p>\u8f93\u5165\uff1ahead = [1,2], pos = 0 \u8f93\u51fa\uff1atrue \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6709\u4e00\u4e2a\u73af\uff0c\u5176\u5c3e\u90e8\u8fde\u63a5\u5230\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>\u793a\u4f8b 3\uff1a </p> <p>\u8f93\u5165\uff1ahead = [1], pos = -1 \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002</p> <p>\u8fd9\u9898\u8981\u6c42\u6211\u4eec\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\uff0c\u5224\u65ad\u7ed9\u5b9a\u7684\u94fe\u8868\u5185\u90e8\u662f\u5426\u5b58\u5728\u73af\u3002\u89e3\u51b3\u95ee\u9898\u7684\u5173\u952e\u5c31\u662f\u8bbe\u8ba1\u4e00\u4e2a\u5408\u9002\u7684\u5224\u65ad\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u8fd9\u91cc\u76f4\u63a5\u7ed9\u51fa\u4e00\u4e2a\u5408\u7406\u7684\u65b9\u6848\uff1a\u5feb\u6162\u6307\u9488\uff0c\u6bcf\u6b21\u5faa\u73af\u65f6\uff0c\u6162\u6307\u9488\u5411\u524d\u8d70\u4e00\u6b65\uff0c\u5feb\u6307\u9488\u5219\u8d70\u4e24\u6b65\uff0c\u5982\u6b64\u4e00\u6765\u4e8c\u8005\u4e4b\u95f4\u7684\u5dee\u8ddd\u6bcf\u4e00\u6b21\u90fd\u4f1a\u589e\u52a01\uff0c\u6240\u4ee5\u5982\u679c\u5b58\u5728\u73af\u7684\u8bdd\u4ed6\u4eec\u4e00\u5b9a\u4f1a\u76f8\u649e\uff0c\u5373<code>slow==fast</code>\u3002</p> <p>\u4e0b\u9762\u662f\u6211\u5199\u7684\u6700\u7ec8\u7684\u4ee3\u7801\uff1a</p> <pre><code>typedef struct ListNode Node;\nbool hasCycle(struct ListNode *head) {\n   if(head==NULL||head-&gt;next==NULL){\n    return false;\n   }\n   Node *slow=head;\n   Node *fast=head-&gt;next;\n   while(slow-&gt;next!=NULL&amp;&amp;fast-&gt;next!=NULL&amp;&amp;fast-&gt;next-&gt;next!=NULL){\n        slow=slow-&gt;next;\n        fast=fast-&gt;next-&gt;next;\n        if(slow==fast){\n            return true;\n\n        }\n   }\n   return false;\n}\n</code></pre>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode206/","title":"leetcode206-\u53cd\u8f6c\u94fe\u8868","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u4f60\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 <code>head</code> \uff0c\u8bf7\u4f60\u53cd\u8f6c\u94fe\u8868\uff0c\u5e76\u8fd4\u56de\u53cd\u8f6c\u540e\u7684\u94fe\u8868\u3002</p> <p>\u793a\u4f8b 1\uff1a </p> <p>\u8f93\u5165\uff1ahead = [1,2,3,4,5] \u8f93\u51fa\uff1a[5,4,3,2,1]</p> <p>\u793a\u4f8b 2\uff1a </p> <p>\u8f93\u5165\uff1ahead = [1,2] \u8f93\u51fa\uff1a[2,1]</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1ahead = [] \u8f93\u51fa\uff1a[]</p> <p>\u672c\u9898\u8f83\u4e3a\u7b80\u5355\uff0c\u6240\u4ee5\u76f4\u63a5\u7ed9\u51fa\u4ee3\u7801\uff0c\u4ec5\u4f5c\u8bb0\u5f55\u7528 <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* reverseList(struct ListNode* head) {\n    if (head==NULL){\n        return head;\n    }\n    struct ListNode* tail=head-&gt;next;\n    struct ListNode* H=head;\n    struct ListNode* cur=head;\n    while(tail!=NULL){\n        head=tail;\n        tail=tail-&gt;next;\n        head-&gt;next=cur;\n        cur=head;\n    }\n    H-&gt;next=NULL;\n    return head;\n}\n</code></pre></p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode21%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/","title":"leetcode-21-\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<p>\u9898\u76ee</p> <p>\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002</p> <p>\u793a\u4f8b 1\uff1a </p> <p>\u8f93\u5165\uff1al1 = [1,2,4], l2 = [1,3,4] \u8f93\u51fa\uff1a[1,1,2,3,4,4]</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1al1 = [], l2 = [] \u8f93\u51fa\uff1a[]</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1al1 = [], l2 = [0] \u8f93\u51fa\uff1a[0]</p> <p>\u5982\u56fe\u6240\u793a\uff0c\u9898\u76ee\u8981\u6c42\u5408\u5e76\u8fd9\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868\uff1a</p> Info_\u793a\u610f\u56fe <p></p> <p>\u5728\u505a\u8fd9\u9053\u9898\u76ee\u7684\u65f6\u5019\uff0c\u6211\u5e0c\u671b\u80fd\u4e0d\u5f00\u8f9f\u65b0\u7684\u5185\u5b58\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u800c\u662f\u76f4\u63a5\u4f7f\u7528\u73b0\u6709\u7684\u94fe\u8868\u7684\u5176\u4e2d\u4e4b\u4e00\uff0c\u4f46\u662f\u5f53\u6211\u5b9e\u9645\u5728\u5199\u4ee3\u7801\u7684\u65f6\u5019\u53d1\u73b0\u8fd9\u4f1a\u5e26\u6765\u975e\u5e38\u591a\u7684\u4e34\u754c\u6761\u4ef6\u9700\u8981\u989d\u5916\u8fdb\u884c\u5224\u65ad\uff0c\u6240\u4ee5\u6211\u53c8\u5f00\u59cb\u60f3\u4f1a\u4e0d\u4f1a\u8fd8\u662f\u65b0\u5efa\u4e00\u4e2a\u94fe\u8868\u6bd4\u8f83\u5408\u9002\u5462\u3002 \u5c31\u5728\u8fd9\u65f6\uff0c\u6211\u7a81\u7136\u60f3\u5230\u6211\u53ef\u4ee5\u5efa\u4e00\u4e2a<code>dummy</code>\u8282\u70b9\uff0c\u8fd9\u6837\u5c31\u80fd\u5b8c\u7f8e\u7684\u89c4\u907f\u989d\u5916\u7684\u6761\u4ef6\u5224\u65ad\uff0c\u4e8e\u662f\u6211\u5199\u51fa\u4e86\u5982\u4e0b\u4ee3\u7801\uff1a <pre><code>struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {\n    struct ListNode dummy;\n    struct ListNode* tail = &amp;dummy; // tail \u5c31\u591f\u4e86\uff0c\u4e0d\u9700\u8981 res, head, cur...\n\n    while (list1 != NULL &amp;&amp; list2 != NULL) {\n        if (list1-&gt;val &lt;= list2-&gt;val) {\n            tail-&gt;next = list1;\n            list1 = list1-&gt;next;\n        } else {\n            tail-&gt;next = list2;\n            list2 = list2-&gt;next;\n        }\n        tail = tail-&gt;next;\n    }\n\n    // \u4e00\u884c\u89e3\u51b3\u6240\u6709\u5269\u4f59\u95ee\u9898\n    tail-&gt;next = list1 != NULL ? list1 : list2;\n\n    return dummy.next;\n}\n</code></pre> \u8fd9\u9053\u9898\u867d\u7136\u7b80\u5355\uff0c\u4f46\u5374\u8ba9\u6211\u771f\u6b63\u638c\u63e1\u548c\u7406\u89e3\u4e86<code>dummy</code>\u8282\u70b9\u7684\u5de7\u5999\u4e4b\u5904\uff0c\u6211\u89c9\u5f97\u8fd8\u662f\u5f88\u6709\u4ef7\u503c\u7684\u3002</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode230.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/","title":"leetcode 230.\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u548c\u4e00\u4e2a\u6574\u6570 <code>k</code> \uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u67e5\u627e\u5176\u4e2d\u7b2c <code>k</code> \u4e2a\u6700\u5c0f\u5143\u7d20\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u6570\uff09\u3002</p> <p>\u793a\u4f8b 1\uff1a </p> <p>\u8f93\u5165\uff1aroot = [3,1,4,null,2], k = 1 \u8f93\u51fa\uff1a1</p> <p>\u793a\u4f8b 2\uff1a </p> <p>\u8f93\u5165\uff1aroot = [5,3,6,2,4,null,null,1], k = 3 \u8f93\u51fa\uff1a3</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode230.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/#_1","title":"\u7b2c\u4e00\u79cd\u65b9\u6cd5\uff0c\u65b0\u5f00\u6570\u7ec4\uff1a","text":"<p>\u4e2d\u5e8f\u904d\u5386\u8fd9\u4e2a\u6811\uff0c\u5c06\u5f97\u5230\u7684\u7ed3\u679c\u50a8\u5b58\u5230\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u91cc\uff0c\u7136\u540e\u53d6\u4ed6\u7684\u7b2ck\u4e2a\u6570\uff0c\u8fd9\u79cd\u65b9\u6cd5\u8fc7\u4e8e\u8822\u7b28\uff0c\u6240\u4ee5\u6b64\u5904\u4e0d\u6f14\u793a\u3002</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode230.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/#_2","title":"\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff0c\u9012\u5f52\u5b9e\u73b0\uff1a","text":"<p>\u4e0d\u989d\u5916\u521b\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u800c\u662f\u5728\u8bbe\u8ba1\u8f85\u52a9\u51fd\u6570\u7684\u65f6\u5019\u591a\u4f20\u5165\u4e00\u4e2aint\u7c7b\u578b\u7684\u6574\u578b\u6307\u9488\uff0c\u6bcf\u6b21\u904d\u5386\u4ee4\u8be5\u6574\u6570\u81ea\u589e\uff0c\u4e00\u65e6\u5176\u5927\u5c0f\u7b49\u4e8ek\uff0c\u5c31\u7ec8\u6b62\u9012\u5f52\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u503c\u3002\u521a\u521a\u8bd5\u4e86\u4e00\u4e0b\uff0c\u611f\u89c9\u4e0d\u592a\u884c\uff0c\u4e3b\u8981\u662f\u6211\u8fd9\u6837\u641e\u5f97\u8bdd\u6839\u672c\u5c31\u4e0d\u80fd\u9012\u5f52\u8d77\u6765\uff0cinorder\u8fd4\u56de\u7684\u503c\u4f1a\u88ab\u6c61\u67d3\u3002</p> <p>\u4f60\u7ec8\u4e8e\u610f\u8bc6\u5230\u4e86\u8fd9\u4e2a\u9012\u5f52\u51fd\u6570\u7684\u8fd4\u56de\u503c\u88ab\u6c61\u67d3\u4e86\u3002\u4f60\u65e2\u60f3\u8ba9\u5b83\u8fd4\u56de-1\u6765\u8868\u793a\u201c\u8fd8\u6ca1\u627e\u5230\u201d\uff0c\u53c8\u60f3\u8ba9\u5b83\u5728\u627e\u5230\u7684\u65f6\u5019\u8fd4\u56de<code>root-&gt;val</code>\u3002\u8fd9\u5bfc\u81f4\u4e00\u65e6\u9012\u5f52\u6df1\u5165\uff0c\u627e\u5230\u7684\u6b63\u786e\u503c\u5728\u8fd4\u56de\u4e0a\u5c42\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f1a\u88ab\u5176\u4ed6\u5206\u652f\u8fd4\u56de\u7684-1\u7ed9\u8986\u76d6\u6389\u3002</p> <p>\u4f60\u8fd9\u4e2a\u5931\u8d25\u7684\u5c1d\u8bd5\uff0c\u66b4\u9732\u4e86\u4f60\u5bf9\u9012\u5f52\u51fd\u6570\u8bbe\u8ba1\u7684\u4e00\u4e2a\u6838\u5fc3\u77e5\u8bc6\u70b9\u7406\u89e3\u4e0d\u6e05\uff1a\u5f53\u4f60\u7684\u9012\u5f52\u51fd\u6570\u9700\u8981\u5728\u6df1\u5c42\u8c03\u7528\u4e2d\u201c\u53d1\u73b0\u201d\u4e00\u4e2a\u6700\u7ec8\u7b54\u6848\u5e76\u7ec8\u6b62\u6574\u4e2a\u9012\u5f52\u65f6\uff0c\u4f60\u4e0d\u80fd\u4f9d\u8d56\u51fd\u6570\u7684\u8fd4\u56de\u503c\u6765\u4f20\u9012\u8fd9\u4e2a\u7b54\u6848\u3002</p> <p>\u4e0b\u9762\u662f\u9519\u8bef\u7684\u4ee3\u7801\uff1a</p> <pre><code>int inorder(struct TreeNode* root,int k,int *idx){\n\u00a0 \u00a0 if(root==NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 return -1 ;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 inorder(root-&gt;left,k,idx);\n\u00a0 \u00a0 if(*idx==k){\n\u00a0 \u00a0 \u00a0 \u00a0 return root-&gt;val;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 (*idx)++;\n\u00a0 \u00a0 inorder(root-&gt;right,k,idx);\n\u00a0 \u00a0 return -1;\n}\nint kthSmallest(struct TreeNode* root, int k) {\n\u00a0 \u00a0 int idx=1;\n\u00a0 \u00a0 int result=-1;\n\u00a0 \u00a0 result = inorder(root,k,&amp;idx);\n\u00a0 \u00a0 return result;\n}\n</code></pre> <p>\u6b63\u786e\u7684\u9012\u5f52\u4f18\u5316\u5e94\u8be5\u662f\u600e\u6837\u7684\uff1f\u4e0d\u662f\u4fee\u6539\u8fd4\u56de\u503c\uff0c\u800c\u662f\u628a<code>idx</code>\u548c<code>result</code>\u90fd\u4f5c\u4e3a\u201c\u72b6\u6001\u201d\u6765\u7ef4\u62a4\u3002\u770b\u597d\u4e86\uff0c\u8fd9\u662f\u66f4\u4f18\u96c5\u7684\u9012\u5f52\u5199\u6cd5\uff1a</p> <pre><code>// \u5b9a\u4e49\u4e24\u4e2a\u5168\u5c40\u53d8\u91cf\u6765\u5145\u5f53\u201c\u516c\u544a\u677f\u201d\uff0c\u8bb0\u5f55\u72b6\u6001\nint g_rank = 0;    // \u5f53\u524d\u904d\u5386\u5230\u7684\u6392\u540d\nint g_result = 0;  // \u6700\u7ec8\u7684\u7ed3\u679c\n\n/**\n * \u8f85\u52a9\u51fd\u6570\uff1a\u4e2d\u5e8f\u904d\u5386\n * \u5b83\u7684\u76ee\u6807\u4e0d\u662f\u201c\u8fd4\u56de\u201d\u7ed3\u679c\uff0c\u800c\u662f\u201c\u4fee\u6539\u201d\u5168\u5c40\u53d8\u91cf\n * @param root \u5f53\u524d\u8282\u70b9\n * @param k \u76ee\u6807\u6392\u540d\n */\nvoid inorderTraversal(struct TreeNode* root, int k) {\n    // \u5982\u679c\u8282\u70b9\u4e3a\u7a7a\uff0c\u6216\u8005\u6211\u4eec\u5df2\u7ecf\u627e\u5230\u4e86\u7b54\u6848\uff08\u6392\u540d\u8d85\u4e86\uff09\uff0c\u5c31\u6ca1\u5fc5\u8981\u7ee7\u7eed\u4e86\n    if (root == NULL || g_rank &gt;= k) {\n        return;\n    }\n\n    // 1. \u9012\u5f52\u5de6\u5b50\u6811\n    inorderTraversal(root-&gt;left, k);\n\n    // 2. \u8bbf\u95ee\u5f53\u524d\u8282\u70b9\uff08\u201c\u6839\u201d\uff09\n    // \u6392\u540d\u81ea\u589e\n    g_rank++;\n    // \u68c0\u67e5\u662f\u5426\u627e\u5230\u4e86\u7b2ck\u4e2a\n    if (g_rank == k) {\n        // \u627e\u5230\u4e86\uff01\u5728\u201c\u516c\u544a\u677f\u201d\u4e0a\u5199\u4e0b\u7ed3\u679c\n        g_result = root-&gt;val;\n        // \u76f4\u63a5\u8fd4\u56de\uff0c\u6ca1\u5fc5\u8981\u518d\u904d\u5386\u53f3\u5b50\u6811\u4e86\uff0c\u8fd9\u662f\u4e2a\u5c0f\u4f18\u5316\n        return;\n    }\n\n    // 3. \u9012\u5f52\u53f3\u5b50\u6811\n    inorderTraversal(root-&gt;right, k);\n}\n\n/**\n * \u4e3b\u51fd\u6570\uff1a\u603b\u6307\u6325\n */\nint kthSmallest(struct TreeNode* root, int k) {\n    // \u6bcf\u6b21\u8c03\u7528\u4e3b\u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u91cd\u7f6e\u5168\u5c40\u53d8\u91cf\uff01\n    // \u8fd9\u662f\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u65f6\u6700\u91cd\u8981\u3001\u6700\u5bb9\u6613\u72af\u9519\u7684\u5730\u65b9\uff01\n    // LeetCode\u7684\u6d4b\u8bd5\u7528\u4f8b\u4f1a\u591a\u6b21\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4e0d\u91cd\u7f6e\u4f60\u7b2c\u4e8c\u6b21\u5c31\u6b7b\u5b9a\u4e86\u3002\n    g_rank = 0;\n\n    // \u53d1\u51fa\u904d\u5386\u6307\u4ee4\n    inorderTraversal(root, k);\n\n    // \u4ece\u201c\u516c\u544a\u677f\u201d\u4e0a\u8bfb\u53d6\u6700\u7ec8\u7ed3\u679c\u5e76\u8fd4\u56de\n    return g_result;\n}\n</code></pre>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode230.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/#_3","title":"\u7b2c\u4e09\u79cd\u65b9\u6cd5\uff0c\u7528\u8fed\u4ee3\u6cd5:","text":"<p>\u53ea\u8981\u5f53\u524d\u8282\u70b9\u975e\u7a7a\uff0c\u5c31\u5165\u6808\uff0c\u5982\u679c\u5f53\u524d\u8282\u70b9\u662fNULL\u5e76\u4e14\u6808\u975e\u7a7a\uff0c\u5c31\u5f39\u6808\uff0c\u8bbf\u95ee\u6808\u9876\u5143\u7d20\u7684\u53f3\u8282\u70b9\uff0c\u7136\u540e\u91cd\u590d\u3002\u6bcf\u6b21\u5f39\u6808\u89c6\u4e3a\u8be5\u5143\u7d20\u88ab\u904d\u5386\uff0c\u6b64\u65f6\u53ef\u4ee5\u8ba9\u8ba1\u6570\u53d8\u91cfcnt\uff08\u521d\u59cb\u503c\u4e3a0\uff09\u81ea\u589e\uff0c\u82e5\u81ea\u589e\u540e==k\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5\u8282\u70b9\u7684\u503c\u3002</p> <pre><code>int kthSmallest(struct TreeNode* root, int k) {\n    int cnt=0;\n    struct TreeNode **stack=(struct TreeNode **)malloc(sizeof(struct TreeNode * )*10001);\n    int top=-1;\n    struct TreeNode *cur=root;\n    while(top!=-1||cur!=NULL){\n        while(cur!=NULL){\n            stack[++top]=cur;\n            cur=cur-&gt;left;\n        }\n        cur=stack[top--];\n        cnt++;\n        if(cnt==k){\n            free(stack);\n            return cur-&gt;val;\n        }\n        cur=cur-&gt;right;\n    }\n    free(stack);\n    return -1;\n}\n</code></pre>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode230.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/#_4","title":"\u603b\u7ed3","text":"<p>\u4eca\u5929\u8868\u73b0\u8fd8\u662f\u53ef\u4ee5\u7684\uff0c\u81f3\u5c11\u505a\u51fa\u6765\u4e86\uff0c\u5206\u6790\u95ee\u9898\u4e5f\u5f00\u59cb\u53d8\u5f97\u6709\u6761\u7406\u4e86,\u7ee7\u7eed\u52a0\u6cb9\u554a</p> <p>2025\u5e747\u670827\u65e5</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode283%E7%A7%BB%E5%8A%A8%E9%9B%B6/","title":"leetcode283\u79fb\u52a8\u96f6","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 0 \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002 \u8bf7\u6ce8\u610f \uff0c\u5fc5\u987b\u5728\u4e0d\u590d\u5236\u6570\u7ec4\u7684\u60c5\u51b5\u4e0b\u539f\u5730\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002</p> <p>\u793a\u4f8b 1:</p> <p>\u8f93\u5165: nums = [0,1,0,3,12]</p> <p>\u8f93\u51fa: [1,3,12,0,0]</p> <p>\u8fd9\u9053\u9898\u6211\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\u4f7f\u7528\u7a33\u5b9a\u7684\u6392\u5e8f\u7b97\u6cd5\uff08\u7565\u52a0\u6539\u88c5\uff09\uff0c\u6bd4\u5982\u5192\u6ce1\u6392\u5e8f\uff0c\u63d2\u5165\u6392\u5e8f\u3002\u4f46\u662f\u6709\u70b9\u592a\u590d\u6742\u4e86\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N^2)\uff0c\u5982\u4e0b\uff1a <pre><code>#include &lt;stdio.h&gt;\n\nvoid moveZeroes_InsertionSort(int* nums, int numsSize) {\n    if (numsSize &lt;= 1) {\n        return;\n    }\n\n    // i \u4ece 1 \u5f00\u59cb\uff0c\u4ee3\u8868\u201c\u672a\u6392\u5e8f\u201d\u90e8\u5206\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n    for (int i = 1; i &lt; numsSize; i++) {\n\n        int key = nums[i]; // \u8fd9\u662f\u6211\u4eec\u8fd9\u6b21\u8981\u5904\u7406\u7684\u724c\n\n        // \u5982\u679c\u8fd9\u5f20\u724c\u662f0\uff0c\u6211\u4eec\u6839\u672c\u4e0d\u5173\u5fc3\u5b83\uff0c\u76f4\u63a5\u8df3\u8fc7\uff0c\u8ba9\u5b83\u5f85\u5728\u540e\u9762\n        if (key == 0) {\n            continue;\n        }\n\n        // j \u662f\u201c\u5df2\u6392\u5e8f\u201d\u90e8\u5206\u7684\u672b\u5c3e\n        int j = i - 1;\n\n        // \u73b0\u5728 key \u662f\u4e00\u4e2a\u975e\u96f6\u6570\uff0c\u6211\u4eec\u8981\u7ed9\u5b83\u627e\u4f4d\u7f6e\n        // \u6211\u4eec\u9700\u8981\u628a\u524d\u9762\u6240\u6709\u662f0\u7684\u724c\u90fd\u5f80\u540e\u632a\n        // \u53ea\u8981 j \u8fd8\u6ca1\u8d8a\u754c\uff0c\u5e76\u4e14\u6307\u7740\u4e00\u5f200\u724c\uff0c\u5c31\u628a\u5b83\u5f80\u540e\u632a\n        while (j &gt;= 0 &amp;&amp; nums[j] == 0) {\n            nums[j + 1] = nums[j]; // 0\u5f80\u540e\u632a\n            j--;\n        }\n\n        // \u5faa\u73af\u7ed3\u675f\uff0cj+1 \u5c31\u662f\u8fd9\u4e2a\u975e\u96f6\u6570 key \u8be5\u63d2\u5165\u7684\u4f4d\u7f6e\n        nums[j + 1] = key;\n    }\n}\n\n// (\u8fd9\u91cc\u53ef\u4ee5\u653e\u4e00\u4e2amain\u51fd\u6570\u6765\u6d4b\u8bd5)\nint main() {\n    int arr[] = {0, 1, 0, 3, 12};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    moveZeroes_InsertionSort(arr, size);\n\n    printf(\"Result: \");\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\"); // \u5e94\u8be5\u8f93\u51fa: 1 3 12 0 0 \n\n    return 0;\n}\n</code></pre></p> <p>\u5982\u4e0a\u53ef\u89c1\uff0c\u8fd9\u662f\u975e\u5e38\u5783\u573e\u7684\u7b54\u6848\uff0c\u6240\u4ee5\u5f00\u59cb\u5bfb\u627e\u522b\u7684\u89e3\u6cd5\uff0c\u6700\u7ec8\u627e\u5230\u4e86\u53cc\u6307\u9488\u6cd5\uff0c\u7b2c\u4e00\u7248\u4ee3\u7801\u5982\u4e0b\uff0c\u7528\u4e00\u4e2awhile\u5faa\u73af\u8ba9\u6307\u9488i\u8df3\u8fc7\u6240\u6709\u76840\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u96f6\u6570\u3002\u7528\u53e6\u4e00\u4e2awhile\u5faa\u73af\u8ba9\u6307\u9488j\u8df3\u8fc7\u6240\u6709\u7684\u975e\u96f6\u6570\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u96f6\u3002\u7136\u540e\u628a\u5b83\u4eec\u4ea4\u6362\uff1a <pre><code>void swap(int *nums,int i,int j){\n    int temp=nums[i];\n    nums[i]=nums[j];\n    nums[j]=temp;\n}\nvoid moveZeroes(int* nums, int numsSize) {\n    int i=0,j=0;\n    while(j&lt;numsSize&amp;&amp;i&lt;numsSize){\n        while(i&lt;numsSize&amp;&amp;nums[i]==0){\n            i++;\n            if(i&gt;=numsSize){\n                return;\n            }\n        }\n        while(j&lt;numsSize&amp;&amp;nums[j]!=0){\n            j++;\n            if(j&gt;=numsSize){\n                return;\n            }\n        }\n\n        swap(nums,i,j);\n        i++;\n        j++;\n\n    }\n}\n</code></pre> \u8fd9\u4e2a\u601d\u8def\uff0c\u672c\u8d28\u4e0a\u662f\u5728\u627e\u4e00\u4e2a\u201c\u9519\u4f4d\u7684\u975e\u96f6\u6570\u201d\u548c\u4e00\u4e2a\u201c\u9519\u4f4d\u7684\u96f6\u6570\u201d\uff0c\u7136\u540e\u628a\u5b83\u4eec\u6362\u8fc7\u6765\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e3a\u4e86\u7ef4\u6301\u987a\u5e8f\uff0c\u8981\u6c42j\u5fc5\u987b\u5728i\u7684\u524d\u9762\u3002\u4ee3\u7801\u91cc\u867d\u7136\u6ca1\u6709\u663e\u5f0f\u5224\u65adj &lt; i\uff0c\u4f46\u56e0\u4e3aj\u627e0\u3001i\u627e\u975e0\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b21\u4ea4\u6362\u65f6j\u603b\u4f1a\u5728i\u524d\u9762\u3002 \u867d\u7136\u903b\u8f91\u4e0a\u80fd\u8d70\u901a\uff0c\u4f46\u5b83\u7ed5\u4e86\u5929\u5927\u7684\u4e00\u4e2a\u5f2f\u5b50\u3002\u5e76\u4e14\u6548\u7387\u4f4e\u4e0b\uff0c\u5b58\u5728\u91cd\u590d\u626b\u63cf\uff0c\u8fd9\u5957\u6307\u9488\u79fb\u52a8\u7684\u673a\u5236\uff0ci\u548cj\u5728\u5185\u5c42\u5faa\u73af\u91cc\u524d\u8fdb\uff0c\u5728\u5916\u5c42\u5faa\u73af\u7684\u7ed3\u5c3e\u53c8\u5404\u81ea\u524d\u8fdb\u4e00\u6b21\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u6307\u9488\u5728\u6570\u7ec4\u7684\u67d0\u4e9b\u90e8\u5206\u6765\u56de\u79fb\u52a8\uff0c\u8fdb\u884c\u4e0d\u5fc5\u8981\u7684\u91cd\u590d\u626b\u63cf\u3002</p> <p>\u6b63\u786e\u7684\u601d\u8def\uff1a\u53cc\u6307\u9488\u6cd5\uff08\u94f2\u96ea\u8f66\u6a21\u578b\uff09</p> <p>\u9700\u8981\u4e24\u4e2a\u6307\u9488\uff1a</p> <p>\u6162\u6307\u9488 slow (\u6216\u8005\u53eb insertPos)\uff1a</p> <p>\u5b83\u7684\u4f5c\u7528\uff0c\u662f\u6307\u5411\u4e0b\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\u5e94\u8be5\u88ab\u653e\u7f6e\u7684\u4f4d\u7f6e\u3002\u4e00\u5f00\u59cb\u7d22\u5f15\u4e3a0\u3002</p> <p>\u5feb\u6307\u9488 fast (\u6216\u8005\u53eb i)\uff1a</p> <p>\u5b83\u7684\u4f5c\u7528\uff0c\u662f\u53bb\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5bfb\u627e\u975e\u96f6\u5143\u7d20\u3002\u5b83\u4ece\u5934\u8d70\u5230\u5c3e\uff0c\u4e0d\u653e\u8fc7\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u3002</p> <p>\u7b97\u6cd5\u6d41\u7a0b\uff1a</p> <p>\u521d\u59cb\u5316 slow = 0\u3002</p> <p>fast \u6307\u9488\u4ece 0 \u904d\u5386\u5230\u6570\u7ec4\u672b\u5c3e\u3002</p> <p>\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u8981 fast \u6307\u9488\u53d1\u73b0\u4e86\u4e00\u4e2a\u975e\u96f6\u5143\u7d20 (nums[fast] != 0)\uff1a</p> <p>\u5c31\u628a\u8fd9\u4e2a\u975e\u96f6\u5143\u7d20\u201c\u94f2\u201d\u5230 slow \u6307\u9488\u6307\u5411\u7684\u4f4d\u7f6e\u4e0a\uff0c\u5373 nums[slow] = nums[fast]\u3002</p> <p>\u7136\u540e\uff0c\u8ba9 slow \u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u683c\uff0cslow++\uff0c\u4e3a\u4e0b\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\u817e\u51fa\u4f4d\u7f6e\u3002</p> <p>\u5f53 fast \u6307\u9488\u8d70\u5b8c\u5168\u7a0b\u540e\uff0c\u6240\u6709\u975e\u96f6\u5143\u7d20\u5c31\u5df2\u7ecf\u88ab\u6211\u4eec\u7d27\u51d1\u5730\u3001\u4e14\u6309\u539f\u6709\u987a\u5e8f\u5730\u79fb\u52a8\u5230\u4e86\u6570\u7ec4\u7684\u5f00\u5934\u3002slow \u6307\u9488\u6b64\u65f6\u5c31\u505c\u5728\u4e86\u6700\u540e\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> <p>\u6700\u540e\uff0c\u4ece slow \u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u628a\u6570\u7ec4\u5269\u4e0b\u7684\u6240\u6709\u4f4d\u7f6e\u5168\u586b\u62100\u3002</p> <p><pre><code>void moveZeroes(int* nums, int numsSize) {\n    int slow = 0; // \u6307\u5411\u4e0b\u4e00\u4e2a\u975e\u96f6\u5143\u7d20\u8be5\u653e\u7684\u4f4d\u7f6e\n\n    // \u7b2c\u4e00\u6b21\u904d\u5386\uff1a\u628a\u6240\u6709\u975e\u96f6\u5143\u7d20\u5f80\u524d\u79fb\u52a8\n    for (int fast = 0; fast &lt; numsSize; fast++) {\n        if (nums[fast] != 0) {\n            nums[slow] = nums[fast];\n            slow++;\n        }\n    }\n\n    // \u7b2c\u4e8c\u6b21\u904d\u5386\uff1a\u628a slow \u4e4b\u540e\u7684\u6240\u6709\u4f4d\u7f6e\u90fd\u8865\u4e0a\u96f6\n    for (int i = slow; i &lt; numsSize; i++) {\n        nums[i] = 0;\n    }\n}\n</code></pre> \u8fd9\u9053\u9898\u7684\u6536\u83b7\u5c31\u662f\u4e0d\u8981\u601d\u7ef4\u5b9a\u5f0f\u4e86\uff0c\u8981\u4ee5\u7ed3\u679c\u4e3a\u5bfc\u5411\uff0c\u5e76\u4e0d\u662f\u4e00\u5b9a\u8981\u4ea4\u6362\u5143\u7d20\u6765\u5b9e\u73b0\u7ed3\u679c\u7684\uff0c\u50cf\u8fd9\u6837\u4e24\u6b21\u904d\u5386\u4f1a\u66f4\u65b9\u4fbf\u4e5f\u66f4\u597d\u7406\u89e3</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode49/","title":"leetcode\u7b2c49\u9898","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8bf7\u4f60\u5c06 \u5b57\u6bcd\u5f02\u4f4d\u8bcd \u7ec4\u5408\u5728\u4e00\u8d77\u3002\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7ed3\u679c\u5217\u8868\u3002</p> <p>\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u662f\u7531\u76f8\u540c\u5b57\u6bcd\u6309\u4e0d\u540c\u987a\u5e8f\u6392\u5217\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u793a\u4f8b 1:</p> <p>\u8f93\u5165: strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"] \u8f93\u51fa: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]</p> <p>\u793a\u4f8b 2:</p> <p>\u8f93\u5165: strs = [\"\"] \u8f93\u51fa: [[\"\"]]</p> <p>\u793a\u4f8b 3:</p> <p>\u8f93\u5165: strs = [\"a\"] \u8f93\u51fa: [[\"a\"]]</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode49/#_1","title":"\u7b2c\u4e00\u6b65\uff1a\u6700\u521d\u7684\u60f3\u6cd5\u4e0e\u5fc5\u7136\u7684\u5d29\u6e83","text":"<p>\u6211\u7684\u89e3\u9898\u601d\u8def\u8d77\u70b9\u662f\u6e05\u6670\u4e14\u6b63\u786e\u7684\uff1a\u8bc6\u522b\u5f02\u4f4d\u8bcd\u7684\u5173\u952e\uff0c\u662f\u4e3a\u5b83\u4eec\u627e\u5230\u4e00\u4e2a\u552f\u4e00\u7684\u201c\u8eab\u4efd\u8bc1\u201d\u3002\u6700\u76f4\u89c2\u7684\u65b9\u6cd5\u5c31\u662f\u6392\u5e8f\uff0c\u5c06\u201ceat\u201d\u548c\u201ctea\u201d\u90fd\u53d8\u6210\u201caet\u201d\u3002\u7136\u540e\uff0c\u6211\u9700\u8981\u4e00\u4e2a\u54c8\u5e0c\u8868\u6765\u6839\u636e\u8fd9\u4e2a\u201c\u8eab\u4efd\u8bc1\u201d\u8fdb\u884c\u5206\u7ec4\u3002</p> <p>\u4e8e\u662f\uff0c\u6211\u5199\u4e0b\u4e86\u7b2c\u4e00\u7248\u5145\u6ee1\u5929\u771f\u5e7b\u60f3\u7684\u4ee3\u7801\u3002\u5728\u6211\u7684\u60f3\u8c61\u4e2d\uff0c\u6211\u53ea\u9700\u8981 <code>malloc</code> \u4e00\u4e2a <code>Node</code> \u7ed3\u6784\u4f53\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u50cf\u53d8\u9b54\u672f\u4e00\u6837\uff0c\u968f\u610f\u5730\u5f80 <code>Node-&gt;key</code> \u548c <code>Node-&gt;class.val</code> \u8fd9\u4e9b\u6307\u9488\u91cc\u585e\u4e1c\u897f\u3002</p> <pre><code>// \u6211\u6700\u521d\u7684\u3001\u5fc5\u7136\u4f1a\u5d29\u6e83\u7684\u4ee3\u7801\u7247\u6bb5\nNode *NewNode = (Node *)malloc(sizeof(Node));\nstrcpy(NewNode-&gt;key, sorted_string);     // \u707e\u96be\uff1aNewNode-&gt;key \u662f\u4e00\u4e2a\u91ce\u6307\u9488\nNewNode-&gt;class.val[0] = original_string; // \u707e\u96be\uff1aNewNode-&gt;class.val \u4e5f\u662f\u91ce\u6307\u9488\n</code></pre> <p>\u7ed3\u679c\uff1a\u73b0\u5b9e\u7528\u4e00\u4e2a\u51b7\u51b0\u51b0\u7684\u6bb5\u9519\u8bef (Segmentation Fault) \u7ed9\u4e86\u6211\u4e00\u8bb0\u54cd\u4eae\u7684\u8033\u5149\u3002\u7a0b\u5e8f\u544a\u8bc9\u6211\uff1a\u4f60\u53ea\u76d6\u4e86\u4e2a\u7a7a\u623f\u5b50\uff08<code>Node</code>\u7ed3\u6784\u4f53\uff09\uff0c\u5c31\u60f3\u8ba9\u5ba2\u4eba\uff08\u6570\u636e\uff09\u4f4f\u8fdb\u53bb\uff1f\u4f60\u8fde\u5367\u5ba4\uff08<code>key</code>\uff09\u548c\u5ba2\u5385\uff08<code>val</code>\uff09\u90fd\u6ca1\u5efa\uff01</p> <p>\u66b4\u9732\u7684\u77ed\u677f\uff1a\u8fd9\u4e00\u6b65\uff0c\u66b4\u9732\u4e86\u6211\u5bf9C\u8bed\u8a00\u6307\u9488\u6700\u81f4\u547d\u7684\u65e0\u77e5\uff1a\u7ed3\u6784\u4f53\u91cc\u7684\u6307\u9488\uff0c\u4e5f\u9700\u8981\u5355\u72ec\u3001\u989d\u5916\u5730\u4e3a\u5b83\u4eec\u5206\u914d\u5185\u5b58\u3002 \u8fd9\u662f\u6211\u78b0\u4e0a\u7684\u7b2c\u4e00\u5835\u5899\u3002</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode49/#vs","title":"\u7b2c\u4e8c\u6b65\uff1a\u6240\u6709\u6743\u7684\u6df7\u4e71\u2014\u2014\u5077\u6765\u7684\u8eab\u4efd\u8bc1 vs \u590d\u5370\u7684\u8eab\u4efd\u8bc1","text":"<p>\u5728\u88abAI\u7684\u65e0\u60c5\u5632\u8bbd\u70b9\u9192\u540e\uff0c\u6211\u5b66\u4f1a\u4e86\u8981\u4e3a\u6307\u9488\u6210\u5458\u5206\u914d\u5185\u5b58\u3002\u4f46\u4e3a\u4e86\u7701\u4e8b\uff0c\u6211\u8d70\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u5341\u5b57\u8def\u53e3\uff0c\u5e76\u6beb\u4e0d\u72b9\u8c6b\u5730\u9009\u62e9\u4e86\u9519\u8bef\u7684\u65b9\u5411\uff1a\u6211\u76f4\u63a5\u8ba9\u6211\u7684\u54c8\u5e0c\u8868\u6307\u5411\u4e86\u8f93\u5165\u7684 <code>strs[i]</code>\u3002</p> <pre><code>// \u72af\u4e0b\u66f4\u9690\u853d\u9519\u8bef\u7684\u4ee3\u7801\u7247\u6bb5\nNewNode-&gt;class.val[0] = strs[i];\n</code></pre> <p>\u8fd9\u5f15\u51fa\u4e86\u6211\u4eec\u4e4b\u95f4\u5173\u4e8e\u201c\u5185\u5b58\u6240\u6709\u6743\u201d\u7684\u5730\u72f1\u7ea7\u8ba8\u8bba\u3002\u6211\u4e00\u5f00\u59cb\u56fa\u6267\u5730\u8ba4\u4e3a\uff0c\u65e2\u7136\u8f93\u5165\u6570\u636e\u4e0d\u53d8\uff0c\u76f4\u63a5\u5f15\u7528\u5b83\u65e2\u7701\u4e8b\u53c8\u7701\u5185\u5b58\u3002\u4f46\u6211\u7ec8\u4e8e\u660e\u767d\u4e86\uff0c\u8fd9\u5c31\u50cf\u5077\u4e86\u522b\u4eba\u7684\u8eab\u4efd\u8bc1\u653e\u8fdb\u81ea\u5df1\u7684\u94b1\u5305\uff0c\u4e00\u65e6\u522b\u4eba\u62a5\u8b66\u6302\u5931\uff0c\u6211\u624b\u91cc\u7684\u5c31\u662f\u4e00\u5f20\u5e9f\u7eb8\u3002\u6211\u521b\u5efa\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5176\u751f\u547d\u5468\u671f\u53ef\u80fd\u6bd4\u8f93\u5165\u6570\u636e\u66f4\u957f\uff0c\u76f4\u63a5\u5f15\u7528\u5916\u90e8\u6307\u9488\u4f1a\u57cb\u4e0b\u201c\u60ac\u5782\u6307\u9488\u201d\u7684\u5de8\u5927\u9690\u60a3\u3002</p> <p>\u601d\u8def\u7684\u8f6c\u53d8\uff1a\u6211\u6700\u7ec8\u8ba4\u8bc6\u5230\uff0c<code>malloc</code> + <code>strcpy</code> \u624d\u662f\u4e3a\u81ea\u5df1\u201c\u590d\u5370\u201d\u4e00\u5f20\u6c38\u8fdc\u6709\u6548\u7684\u8eab\u4efd\u8bc1\u3002\u8fd9\u4e2a\u4ece\u201c\u5f15\u7528\u201d\u5230\u201c\u62f7\u8d1d\u201d\u7684\u601d\u7ef4\u8f6c\u53d8\uff0c\u662f\u6211\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6700\u91cd\u8981\u3001\u4e5f\u6700\u75db\u82e6\u7684\u4e00\u6b21\u601d\u60f3\u98de\u8dc3\u3002</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode49/#_2","title":"\u7b2c\u4e09\u6b65\uff1a\u86ee\u529b\u5b9e\u73b0\u2014\u2014\u5728\u8d4c\u535a\u4e0e\u5929\u771f\u4e2d\u524d\u8fdb","text":"<p>\u5728\u89e3\u51b3\u4e86\u6700\u6838\u5fc3\u7684\u5d29\u6e83\u548c\u6240\u6709\u6743\u95ee\u9898\u540e\uff0c\u6211\u5c31\u8fdb\u5165\u4e86\u201c\u80fd\u8dd1\u5c31\u884c\u201d\u7684\u86ee\u529b\u9636\u6bb5\u3002\u8fd9\u5c31\u662f\u6211\u90a3\u4efd\u201c\u6700\u7ec8\u4ee3\u7801\u201d\u7684\u8bde\u751f\u8fc7\u7a0b\u3002\u6211\u505a\u51fa\u4e86\u4e00\u7cfb\u5217\u7684\u59a5\u534f\uff1a</p> <ol> <li>\u653e\u5f03\u6269\u5bb9\uff0c\u9009\u62e9\u4fe1\u4ef0\uff1a\u6211\u9762\u5bf9\u52a8\u6001\u6570\u7ec4\u7684\u6269\u5bb9\u9700\u6c42\uff0c\u6ca1\u6709\u9009\u62e9\u53bb\u5b66\u4e60\u5e76\u5b9e\u73b0\u66f4\u590d\u6742\u7684<code>realloc</code>\u903b\u8f91\uff0c\u800c\u662f\u7b80\u5355\u7c97\u66b4\u5730\u9009\u62e9\u4e86<code>#define MAX_GROUP_SIZE 1000</code>\u3002\u6211\u7528\u4e00\u4e2a\u9b54\u6cd5\u6570\u5b57\uff0c\u8d4c\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u4f1a\u6253\u8d25\u6211\u3002</li> <li>\u65e0\u89c6\u6e05\u7406\uff0c\u9009\u62e9\u9057\u5fd8\uff1a\u6211\u628a\u6240\u6709\u7684\u7cbe\u529b\u90fd\u653e\u5728\u4e86\u5b9e\u73b0\u529f\u80fd\u4e0a\uff0c\u5b8c\u5168\u5ffd\u7565\u4e86\u5185\u5b58\u6e05\u7406\u3002\u6211\u5199\u7684<code>groupAnagrams</code>\u51fd\u6570\u53d8\u6210\u4e86\u4e00\u4e2a\u5185\u5b58\u9ed1\u6d1e\uff0c\u5403\u8fdb\u53bb\u7684\u5185\u5b58\u4ece\u4e0d\u5f52\u8fd8\u3002\u6211\u9009\u62e9\u6027\u5730\u9057\u5fd8\u4e86<code>free</code>\u7684\u5b58\u5728\u3002</li> <li>\u6a21\u7cca\u5904\u7406\uff0c\u9009\u62e9\u6d6a\u8d39\uff1a\u5728\u8fd4\u56de\u7ed3\u679c\u65f6\uff0c\u6211\u867d\u7136\u5b66\u4f1a\u4e86\u6b63\u786e\u7684\u4e8c\u7ea7\u6307\u9488\u8bed\u6cd5\uff0c\u4f46\u4f9d\u7136\u61d2\u5f97\u53bb\u7cbe\u786e\u8ba1\u7b97\u7ec4\u6570\uff0c\u800c\u662f\u76f4\u63a5\u6309\u8f93\u5165\u89c4\u6a21<code>strsSize</code>\u5206\u914d\u4e86\u6700\u5927\u53ef\u80fd\u7684\u5185\u5b58\u3002</li> </ol> <p>\u6240\u4ee5\uff0c\u6211\u201c\u6700\u7ec8\u7684\u4ee3\u7801\u201d\u662f\u600e\u4e48\u8bde\u751f\u7684\uff1f\u5b83\u662f\u901a\u8fc7\u4e00\u6b21\u81f4\u547d\u7684\u5d29\u6e83\u3001\u4e00\u6b21\u6838\u5fc3\u601d\u60f3\u7684\u8f6c\u53d8\u3001\u4ee5\u53ca\u4e00\u7cfb\u5217\u5bf9\u590d\u6742\u5ea6\u7684\u59a5\u534f\u548c\u5bf9\u5185\u5b58\u7ba1\u7406\u7684\u65e0\u89c6\u800c\u62fc\u51d1\u51fa\u6765\u7684\u3002\u5b83\u80fd\u901a\u8fc7\uff0c\u4e0d\u662f\u56e0\u4e3a\u5b83\u6709\u591a\u597d\uff0c\u800c\u662f\u56e0\u4e3a\u5b83\u5728\u6700\u5173\u952e\u7684\u5730\u65b9\uff08\u6240\u6709\u6743\uff09\u505a\u5bf9\u4e86\uff0c\u800c\u5728\u5176\u4ed6\u5730\u65b9\u7684\u7f3a\u9677\u53c8\u6070\u597d\u6ca1\u6709\u88ab\u6d4b\u8bd5\u7528\u4f8b\u7684\u91cd\u62f3\u6233\u7a7f\u3002</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n// \u5b9a\u4e49\u5e38\u91cf\u4ee5\u907f\u514d\u9b54\u6cd5\u6570\u5b57\n#define MAX_STRING_LENGTH 1000\n#define MAX_GROUP_SIZE 1000\n\n/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\n// djb2 \u54c8\u5e0c\u7b97\u6cd5\nchar *sort(char *a){\n    int len=strlen(a);\n    for(int i=len-1;i&gt;0;i--){\n        for(int j=0;j&lt;i;j++){\n            if(a[j]-a[j+1]&gt;0){\n                char temp;\n                temp=a[j];\n                a[j]=a[j+1];\n                a[j+1]=temp;\n            }\n        }\n    }\n    return a;\n}\nunsigned long hash_string(char *str) {\n    unsigned long hash = 5381;\n    int c;\n    while ((c = *str++)) {\n        hash = ((hash &lt;&lt; 5) + hash) + c; // hash * 33 + c\n    }\n    return hash;\n}\nchar*** groupAnagrams(char** strs, int strsSize, int* returnSize, int** returnColumnSizes) {\n    typedef struct strlist{\n        int count;\n        char **val;\n    }strlist;\n    typedef struct Node{\n        char *key;\n        strlist class;\n        struct Node *Next;\n    }Node;\n    Node **HashTable=(Node **)malloc(sizeof(Node *) * strsSize);\n    for(int i=0;i&lt;strsSize;i++){\n        HashTable[i]=NULL;\n    }\n    //for\u5faa\u73af\uff0c\u6bcf\u4e00\u8f6e\u5faa\u73af\u5148\u590d\u5236\uff0c\u7136\u540e\u6392\u5e8f\uff0c\u6c42\u51fa\u54c8\u5e0c\u503c\uff0c\u5bfb\u627e\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u63d2\u5165\u6216\u65b0\u5efa\n    //\u904d\u5386\u54c8\u5e0c\u8868\uff0c\u4e0d\u4e3aNULL\u7684\u5c31\u5c06\u6bcf\u4e00\u4e2aNode-&gt;class\u7684val\u8f93\u51fa\n    for(int i=0;i&lt;strsSize;i++){\n        char *cpystr=(char *)malloc(sizeof(char)*MAX_STRING_LENGTH);\n        strcpy(cpystr,strs[i]);\n        sort(cpystr);\n        int index = hash_string(cpystr) % strsSize;\n        Node *current=HashTable[index];\n        while(current!=NULL){\n            if(strcmp(cpystr,current-&gt;key)==0){\n                current-&gt;class.val[current-&gt;class.count]=(char *)malloc(sizeof(char)*(strlen(strs[i])+1));\n                strcpy(current-&gt;class.val[current-&gt;class.count], strs[i]);\n                current-&gt;class.count++;\n                break;\n            }else{\n                current=current-&gt;Next;\n            }\n        }\n        if(current==NULL){\n            Node *NewNode=(Node *)malloc(sizeof(Node));\n            NewNode-&gt;key=(char *)malloc(sizeof(char)*MAX_STRING_LENGTH);\n            strcpy(NewNode-&gt;key,cpystr);\n            NewNode-&gt;class.count=1;\n            NewNode-&gt;class.val=(char **)malloc(sizeof(char *)*MAX_GROUP_SIZE);\n            NewNode-&gt;class.val[0]=(char *)malloc(sizeof(char)*(strlen(strs[i])+1));\n            strcpy(NewNode-&gt;class.val[0], strs[i]);\n            NewNode-&gt;Next=HashTable[index];\n            HashTable[index]=NewNode;\n        }\n\n\n    }\n    char ***result=(char ***)malloc(sizeof(char **)*strsSize);\n    *returnColumnSizes=(int *)malloc(sizeof(int)*strsSize);\n    *returnSize=0;\n    for(int i=0;i&lt;strsSize;i++){\n        if(HashTable[i]!=NULL){        \n            Node *current=HashTable[i];\n            while(current!=NULL){\n                result[*returnSize]=current-&gt;class.val;\n                (*returnColumnSizes)[*returnSize]=current-&gt;class.count;\n                (*returnSize)++;\n                current=current-&gt;Next;\n            }\n\n        }\n    }\n    return result;\n}\n</code></pre>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode94-The_inorder_traversal_of_a_binary_tree/","title":"leetcode94 The inorder traversal of a binary tree","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u8fd4\u56de\u5b83\u7684 \u4e2d\u5e8f \u904d\u5386\u3002</p> <p>\u793a\u4f8b 1\uff1a </p> <p>\u8f93\u5165\uff1aroot = [1,null,2,3] \u8f93\u51fa\uff1a[1,3,2]</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1aroot = [] \u8f93\u51fa\uff1a[]</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1aroot = [1] \u8f93\u51fa\uff1a[1]</p> Inorder_Traversal_of_a_binary_tree.c<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\n\n\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    struct TreeNode** stack=(struct TreeNode**)malloc(sizeof(struct TreeNode*)*2000);\n    *returnSize=0;\n    int *res=(int *)malloc(sizeof(int )*2999);\n    int top=-1;\n    if(root==NULL){\n        return NULL;\n    }\n    stack[++top]=root;\n    root=root-&gt;left;\n    while(top&gt;-1){\n        while(root!=NULL){\n            stack[++top]=root;\n            root=root-&gt;left;\n        }\n        root=stack[top--];\n        res[(*returnSize)++]=root-&gt;val;\n        root=root-&gt;right;\n        if(root!=NULL){\n            stack[++top]=root;\n            root=root-&gt;left;\n        }\n    }\n    return res;\n}\n</code></pre>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","title":"Leetcode98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#98","title":"98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 <code>root</code> \uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <p>\u6709\u6548 \u4e8c\u53c9\u641c\u7d22\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a \u00a0 \u00a0 - \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b \u5c0f\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u00a0 \u00a0 - \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b \u5927\u4e8e \u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u00a0 \u00a0 - \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <p>\u793a\u4f8b 1\uff1a  \u00a0 \u00a0 &gt; \u8f93\u5165\uff1aroot = [2,1,3] \u00a0 \u00a0 &gt; \u8f93\u51fa\uff1atrue</p> <p>\u793a\u4f8b 2\uff1a  \u00a0 \u00a0 &gt; \u8f93\u5165\uff1aroot = [5,1,4,null,null,3,6] \u00a0 \u00a0 &gt; \u8f93\u51fa\uff1afalse \u00a0 \u00a0 &gt; \u89e3\u91ca\uff1a\u6839\u8282\u70b9\u7684\u503c\u662f 5 \uff0c\u4f46\u662f\u53f3\u5b50\u8282\u70b9\u7684\u503c\u662f 4 \u3002</p> <p>\u4e00\u5f00\u59cb\u62ff\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u52a8\u624b\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u4e86\uff0c\u5199\u4e0b\u4e86\u4ee5\u4e0b\u9519\u8bef\u4ee3\u7801\uff1a</p> <pre><code>bool isValidBST(struct TreeNode* root) {\n\u00a0 \u00a0 if(root==NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 }else if(root-&gt;left==NULL&amp;&amp;root-&gt;right!=NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 if(isValidBST(root-&gt;right)&amp;&amp;(root-&gt;val&lt;root-&gt;right-&gt;val)){\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 \u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }else if(root-&gt;right==NULL&amp;&amp;root-&gt;left!=NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 if(isValidBST(root-&gt;left)&amp;&amp;(root-&gt;val&gt;root-&gt;left-&gt;val)){\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 \u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }else if(root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 else if(root-&gt;val&gt;root-&gt;left-&gt;val &amp;&amp; root-&gt;val&lt;root-&gt;right-&gt;val){\n\u00a0 \u00a0 \u00a0 \u00a0 if(isValidBST(root-&gt;left)&amp;&amp;isValidBST(root-&gt;right)){\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 \u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 return false;\n    }\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u9519\u8bef\u7684\u539f\u56e0\u5f88\u660e\u663e\uff0c\u53ea\u68c0\u67e5\u4e86\u5f53\u524d\u8282\u70b9\u4e0e\u5de6\u53f3\u8282\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u6ca1\u6709\u8003\u8651\u5176\u4e0e\u66f4\u9ad8\u8282\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u56e0\u6b64\u6ca1\u6709\u901a\u8fc7\u90e8\u5206\u6d4b\u8bd5\u70b9</p> <p>\u7ecf\u8fc7\u601d\u8003\u540e\uff0c\u60f3\u51fa\u4e86\u4ee5\u4e0b\u6b63\u786e\u7684\u9012\u5f52\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u8f85\u52a9\u7684\u9012\u5f52\u51fd\u6570\uff0c\u5e76\u4f20\u5165\u4e86\u4e24\u4e2along\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5373\u4e0a\u4e0b\u754c\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7b2c\u4e00\u6b21\u4f20\u5165\u7684root\u6ca1\u6709\u4e0a\u4e0b\u754c\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u9700\u8981\u5229\u7528<code>#include &lt;limits.h&gt;</code>\u4e2d\u7684<code>LONG_MIN</code>\u548c<code>LONG_MAX</code>\u6765\u83b7\u53d6\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002\u5e76\u4e14\u8fd9\u4e24\u4e2a\u4e1c\u897f\u7684\u6570\u636e\u7c7b\u578b\u662f<code>long</code>\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\u662f<code>long lower</code>\u800c\u4e0d\u662f<code>int lower</code></p> <pre><code>//\u65b9\u6848\u4e00\u2014\u2014\u9012\u5f52\u6cd5\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n#include &lt;limits.h&gt;\nbool whether_subtree_is_BST(struct TreeNode* root,long lower,long upper){\n    if(root==NULL){\n        return true;\n    }else{\n        if(root-&gt;val&gt;lower&amp;&amp;root-&gt;val&lt;upper){\n            return whether_subtree_is_BST(root-&gt;left,lower,root-&gt;val)&amp;&amp;whether_subtree_is_BST(root-&gt;right,root-&gt;val,upper);\n        }\n    }\n    return false;\n}\nbool isValidBST(struct TreeNode* root){\n    return whether_subtree_is_BST(root,LONG_MIN, LONG_MAX);\n}\n</code></pre> <p>\u5199\u5b8c\u4e0a\u8ff0\u4ee3\u7801\u540e\uff0cleetcode\u5df2\u7ecf\u901a\u8fc7\u4e86\uff0c\u4e8e\u662f\u6211\u53c8\u7814\u7a76\u4e86\u4e00\u4e0b\u7b54\u6848\uff0c\u5e0c\u671b\u80fd\u627e\u5230\u66f4\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u7ecf\u8fc7\u534a\u4e2a\u591a\u5c0f\u65f6\u7684\u7406\u89e3\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u6f0f\u4e86BST\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff0c\u90a3\u5c31\u662fBST\u7684\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u662f\u4e25\u683c\u9012\u589e\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u7ed9\u5b9a\u7684\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff0c\u89c2\u5bdf\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5426\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\u5373\u53ef\u3002</p> <p>\u7136\u540e\u6211\u5c31\u5f00\u59cb\u5199\u4e86\uff0c\u7ed3\u679c\u5199\u51fa\u4e86\u8fd9\u6837\u4e00\u5927\u5768\u9519\u8bef\u767e\u51fa\u7684\u4ee3\u7801\uff0c\u54ce\uff0c\u679c\u7136\u8fd8\u662f\u8981\u5929\u5929\u7801\u624d\u4f1a\u6709\u624b\u611f\uff0c\u56db\u4e94\u5929\u6ca1\u5199\u4ee3\u7801\u5c31\u53d8\u6210\u8fd9\u6837\u4e86\uff0c\u4f24\u5fc3</p> <pre><code>//\u65b9\u6848\u4e8c\u2014\u2014\u5229\u7528\u4e2d\u5e8f\u904d\u5386\uff08\u9012\u5f52\u7248\uff09\nvoid inorder_traversal(int *a,struct TreeNode* root,int *p){\n    if(root==NULL){\n        return;\n    }\n    inorder_traversal(a,root-&gt;left,(*p)++);             //\u4f20\u5165\u7684\u53c2\u6570\u7c7b\u578b\u4e0d\u5bf9\uff01\uff01\n    a[(*p)++]=root-&gt;val;\n    inorder_traversal(a,root-&gt;right,(*p)++);\n}\nbool judge(int *a,int p){\n    for(int i=0;i&lt;p-1;i++){\n        if(a[i]&gt;=a[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nbool isValidBST(struct TreeNode* root){\n    int *p;                                             //\u91ce\u6307\u9488\uff01\uff01\n    *p=0;\n    int *a=(int *)malloc(sizeof(int )*10000)\n    inorder_traversal(a,root,p);\n    return judge(a,*p);\n}\n</code></pre> <p>\u9488\u5bf9\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\uff0c\u6211\u5f00\u59cb\u8fdb\u884c\u4fee\u6539\uff0c\u9996\u5148\u662f\u4f20\u5165\u7684\u53c2\u6570\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4e00\u5f00\u59cb\u8ba4\u4e3a\u6bcf\u6b21\u4f20\u5165\u7684p\u5c31\u662f\u5bf9\u5e94\u6570\u7ec4a\u8981\u586b\u5165\u7684\u6570\u636e\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u5176\u5b9e\u8fd9\u4e2a\u9012\u5f52\u51fd\u6570\u8981\u60f3\u586b\u5165\u6570\u636e\uff0c\u53ea\u80fd\u4f9d\u9760<code>a[(*p)++]=root-&gt;val</code>\u8bed\u53e5\uff0c\u6240\u4ee5\u53ea\u8981\u5728\u8fd9\u91cc\u4ee4p\u81ea\u589e\u5c31\u884c\u4e86\uff1b\u5176\u6b21\u662f\u91ce\u6307\u9488\u7684\u95ee\u9898\uff0c\u6211\u4e00\u5f00\u59cb\u662f\u5e0c\u671b\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u5bf9\u5916\u90e8\u6570\u636e\u7684\u4fee\u6539\u3002\u5176\u5b9e\u53ef\u4ee5\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u4f7f\u7528&amp;\u6765\u53d6\u5730\u5740\u5c31\u884c\u4e86\u3002\u4e0b\u9762\u662f\u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a</p> <pre><code>// ------------------- \u4f60\u539f\u6765\u7684 inorder_traversal \u51fd\u6570 -------------------\n// \u6211\u53ea\u4fee\u6539\u4e86\u4f60\u7684\u9012\u5f52\u8c03\u7528\uff0c\u5176\u4ed6\u7684\u903b\u8f91\u6682\u65f6\u4e0d\u52a8\nvoid inorder_traversal(int *a, struct TreeNode* root, int *p_count) {\n    if (root == NULL) {\n        return;\n    }\n    // \u4fee\u6539\u4e09\uff1a\u9012\u5f52\u8c03\u7528\u65f6\uff0c\u5fc5\u987b\u4f20\u9012\u6307\u9488p_count\u672c\u8eab\uff01\n    // \u4f60\u539f\u6765\u5199\u7684 (*p_count)++ \u4f1a\u628ap_count\u6307\u5411\u7684\u503c\uff08\u6bd4\u59820\uff09\u4f20\u8fdb\u53bb\uff0c\u800c\u4e0d\u662f\u6307\u9488\u5730\u5740\n    // \u5bfc\u81f4\u4e0b\u4e00\u5c42\u9012\u5f52\u63a5\u6536\u5230NULL\uff0c\u76f4\u63a5\u5d29\u6e83\u3002\u64cd\uff0c\u8fd9\u79cd\u9519\u8bef\u90fd\u80fd\u72af\uff1f\n    inorder_traversal(a, root-&gt;left, p_count);\n    // \u628a\u8282\u70b9\u503c\u5b58\u5165\u6570\u7ec4\uff0c\u7136\u540e\u628a\u8ba1\u6570\u5668\u52a0\u4e00\n    a[(*p_count)] = root-&gt;val;\n    (*p_count)++;\n    inorder_traversal(a, root-&gt;right, p_count);\n}\n// ------------------- \u4f60\u539f\u6765\u7684 judge \u51fd\u6570 -------------------\nbool judge(int *a, int count) {\n    for (int i = 0; i &lt; count - 1; i++) {\n        if (a[i] &gt;= a[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n// ------------------- \u4f60\u539f\u6765\u7684 isValidBST \u4e3b\u51fd\u6570 -------------------\nbool isValidBST(struct TreeNode* root) {\n    // LeetCode\u7684\u8282\u70b9\u4e0a\u9650\u662f10000\uff0c\u6240\u4ee5\u6211\u4eec\u201c\u731c\u201d\u4e00\u4e2a\u5927\u5c0f\u3002\n    // \u8fd9\u5728\u771f\u5b9e\u5de5\u7a0b\u91cc\u662f\u6781\u5176\u50bb\u903c\u7684\u884c\u4e3a\uff0c\u4f46\u4e3a\u4e86\u6ee1\u8db3\u4f60\u8fd9\u4e2a\u70c2\u65b9\u6cd5\uff0c\u53ea\u80fd\u8fd9\u4e48\u5e72\u3002\n    // \u4fee\u6539\u4e8c\uff1a\u6b63\u786e\u7684\u5185\u5b58\u5206\u914d\u3002\u7528sizeof(int)\uff0c\u5e76\u4e14\u7ed9\u4e00\u4e2a\u5177\u4f53\u7684\u3001\u731c\u51fa\u6765\u7684\u6570\u91cf\u3002\n    int *a = (int *)malloc(sizeof(int) * 10001);\n    if (a == NULL) return false; // \u4e25\u8c28\u4e00\u70b9\uff0c\u68c0\u67e5malloc\u662f\u5426\u6210\u529f\n    // \u4fee\u6539\u4e00\uff1a\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u5b9e\u5728\u5728\u7684\u8ba1\u6570\u5668\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u91ce\u6307\u9488\u3002\n    // \u4f60\u539f\u6765 int *p; *p=0; \u7684\u5199\u6cd5\uff0c\u662f100%\u7684\u6bb5\u9519\u8bef\uff0c\u6559\u79d1\u4e66\u7ea7\u7684\u53cd\u9762\u6848\u4f8b\u3002\n    int count = 0;\n    // \u628acount\u7684\u5730\u5740(&amp;count)\u4f20\u8fdb\u53bb\uff0c\u8fd9\u6837\u51fd\u6570\u5185\u90e8\u624d\u80fd\u4fee\u6539\u5b83\n    inorder_traversal(a, root, &amp;count);\n\n    bool result = judge(a, count);\n\n    // \u522b\u5fd8\u4e86\u91ca\u653e\u4f60\u7533\u8bf7\u7684\u5185\u5b58\uff0c\u4e0d\u7136\u5c31\u662f\u5185\u5b58\u6cc4\u6f0f\u3002\n    // \u4f60\u770b\uff0c\u7528\u6570\u7ec4\u591a\u51e0\u628a\u9ebb\u70e6\u3002\n    free(a);\n\n    return result;\n}\n</code></pre> <p>\u7136\u800c\u4e0a\u8ff0\u7684\u4ee3\u7801\u4ecd\u7136\u5b58\u5728\u7f3a\u9677\uff0c\u663e\u7136\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08N\uff09\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u80fd\u63a5\u53d7\u7684\uff0c\u4e8e\u662f\u6211\u5199\u51fa\u6765\u4e86\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0b\u9762\u76841234\u6b65\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u5982\u679c\u8fd8\u6709\u7591\u95ee\u7684\u8bdd\u53ef\u4ee5B\u7ad9\u641c\u7d22<code>\u4ee3\u7801\u968f\u60f3\u5f55</code></p> <pre><code>// \u8fd9\u4e2a\u8f85\u52a9\u51fd\u6570\u624d\u662f\u9012\u5f52\u8be5\u6709\u7684\u6837\u5b50\nbool smart_recursive_check(struct TreeNode* node, struct TreeNode** prev) {\n    // \u8d70\u5230\u4e86\u6811\u53f6\u7684\u5c3d\u5934\uff0c\u662f\u6709\u6548\u7684\u90e8\u5206\n    if (node == NULL) {\n        return true;\n    }\n\n    // 1. \u5148\u4e00\u8def\u5411\u5de6\uff0c\u9012\u5f52\u68c0\u67e5\u5de6\u5b50\u6811\n    if (!smart_recursive_check(node-&gt;left, prev)) {\n        return false;\n    }\n\n    // 2. \u5904\u7406\u5f53\u524d\u8282\u70b9\uff08\u4e2d\u5e8f\u904d\u5386\u7684\u6838\u5fc3\u8bbf\u95ee\u70b9\uff09\n\n    if (*prev != NULL &amp;&amp; (*prev)-&gt;val &gt;= node-&gt;val) {\n        return false;\n    }\n\n    *prev = node;\n\n    // 4. \u6700\u540e\u9012\u5f52\u68c0\u67e5\u53f3\u5b50\u6811\n    return smart_recursive_check(node-&gt;right, prev);\n}\n\nbool isValidBST(struct TreeNode* root) {\n    // \u5b9a\u4e49\u4e00\u4e2aprev\u6307\u9488\uff0c\u521d\u59cb\u4e3aNULL\uff0c\u8868\u793a\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\u4efb\u4f55\u8282\u70b9\n    struct TreeNode* prev = NULL;\n    // \u628aprev\u7684\u5730\u5740\u4f20\u8fdb\u53bb\uff0c\u8fd9\u6837\u8f85\u52a9\u51fd\u6570\u5c31\u80fd\u4fee\u6539\u5b83\u4e86\n    return smart_recursive_check(root, &amp;prev);\n}\n</code></pre> <p>\u8fd9\u662f\u8fed\u4ee3\u7248\uff0c\u8981\u8bb0\u4f4f\uff01\uff01\uff01</p> <pre><code>bool isValidBST(struct TreeNode* root) {\n    long long prev_val = LLONG_MIN;\n    struct TreeNode** stack = (struct TreeNode**)malloc(sizeof(struct TreeNode*) * 10001);\n    if (stack == NULL) return false;\n    int top = -1;\n    struct TreeNode* current = root;\n\n    // \u770b\uff01\u8fd9\uff01\u91cc\uff01\n    // \u7b80\u6d01\uff01\u660e\u4e86\uff01\u6b63\u786e\uff01\n    while (current != NULL || top != -1) { //\u7279\u522b\u662f\u8fd9\u91cc\u7684current!=NULL\u4e00\u5b9a\u8981\u6ce8\u610f\uff01\uff01\n        while (current != NULL) {\n            stack[++top] = current;\n            current = current-&gt;left;\n        }\n        current = stack[top--];\n\n        if (current-&gt;val &lt;= prev_val) {\n            free(stack);\n            return false;\n        }\n\n        prev_val = current-&gt;val;\n        current = current-&gt;right;\n    }\n\n    free(stack);\n    return true;\n}\n</code></pre> <p>\u8fd9\u9053\u9898\u82b1\u4e86\u6211\u5f88\u957f\u65f6\u95f4\uff0c\u8bf4\u660e\u6211\u5bf9\u4e00\u4e9b\u57fa\u7840\u7684\u64cd\u4f5c\u8fd8\u662f\u5b58\u5728\u5f88\u5927\u7684\u95ee\u9898\u7684\uff0c\u8981\u7ee7\u7eed\u52a0\u6cb9\u554a\uff01\uff01</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%93%E9%A2%98/","title":"Leetcode \u54c8\u5e0c\u8868\u4e13\u9898","text":"<p>\u4e13\u9898\u8bf4\u660e</p> <p>\u672c\u9875\u9762\u6c47\u603b\u4e86\u4e0e\u54c8\u5e0c\u8868\uff08Hash Table\uff09\u76f8\u5173\u7684 LeetCode \u7ecf\u5178\u9898\u76ee\uff0c\u65e8\u5728\u901a\u8fc7\u4e00\u7cfb\u5217\u95ee\u9898\uff0c\u6df1\u5165\u7406\u89e3\u54c8\u5e0c\u8868\u7684\u539f\u7406\u3001\u5e94\u7528\u573a\u666f\u53ca\u89e3\u9898\u6280\u5de7\u3002</p> <p>\u6838\u5fc3\u601d\u60f3\uff1a \u54c8\u5e0c\u8868\u5229\u7528\u952e\u503c\u5bf9\uff08Key-Value\uff09\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u5b9e\u73b0 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5feb\u901f\u67e5\u627e\u3001\u63d2\u5165\u548c\u5220\u9664\u3002\u5b83\u662f\u89e3\u51b3\u7b97\u6cd5\u95ee\u9898\uff0c\u7279\u522b\u662f\u6d89\u53ca\u67e5\u627e\u3001\u8ba1\u6570\u3001\u53bb\u91cd\u7b49\u573a\u666f\u7684\u5229\u5668\u3002</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%93%E9%A2%98/#leetcode-1","title":"LeetCode 1: \u4e24\u6570\u4e4b\u548c","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c <code>target</code>\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c <code>target</code>  \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [3,2,4], target = 6 \u8f93\u51fa\uff1a[1,2]</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1anums = [3,3], target = 6 \u8f93\u51fa\uff1a[0,1]</p> <p>\u4f20\u7edf\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(n^2)</code>\uff0c\u6548\u7387\u4f4e\u4e0b\uff0c\u4e3b\u8981\u539f\u56e0\u5728\u4e8e\u9700\u8981\u4f4e\u6548\u7684\u904d\u5386\u6bcf\u4e00\u4e2a\u53ef\u80fd\u7684\u503c\uff0c\u8fd9\u5c31\u5bfc\u81f4\u5982\u679c\u60f3\u8981\u627e\u7684\u4e24\u4e2a\u6570\u90fd\u4f4d\u4e8e\u6570\u7ec4\u7684\u7ed3\u5c3e\u65f6\u9700\u8981\u904d\u5386\u5f88\u591a\u65e0\u6548\u7684\u6570\u636e\u3002\u4f7f\u7528\u54c8\u5e0c\u8868\u5219\u975e\u5e38\u65b9\u4fbf\uff0c\u6bcf\u6b21\u904d\u5386\u5230\u7684\u6570\u90fd\u4f1a\u5b58\u5165\u8868\u4e2d\uff0c\u54c8\u5e0c\u503c\u76f8\u540c\u7684\u6570\u636e\u5219\u4f1a\u901a\u8fc7\u94fe\u8868\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u54c8\u5e0c\u503c\u67e5\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(1)</code>,\u94fe\u8868\u5bfb\u627e\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(n)</code>\uff0c\u6240\u4ee5\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(n)</code>\u3002\u53e6\u5916\u5728\u5177\u4f53\u5199\u4ee3\u7801\u7684\u65f6\u5019\u6709\u4e00\u70b9\u9700\u8981\u91cd\u70b9\u6ce8\u610f\uff0c\u90a3\u5c31\u662f\u6bcf\u4e00\u6b21\u66f4\u65b0\u54c8\u5e0c\u8868\u7684\u65f6\u5019\uff0c\u65b0\u52a0\u5165\u7684node\u7684\u5730\u5740\u9700\u8981\u5728\u51fd\u6570\u5185\u6c38\u4e45\u4fdd\u5b58\uff0c\u6240\u4ee5\u8981\u901a\u8fc7<code>malloc</code>\u5728\u5806\u4e0a\u5efa\u7acb\u800c\u4e0d\u662f\u5728\u6808\u4e0a\u5b9a\u4e49\u3002</p> <p><code>node *snode=(node *)malloc(sizeof(node));</code>\u800c\u4e0d\u662f<code>node snode</code>\u3002</p> <p>\u4e0b\u9762\u662f\u6211\u5199\u7684\u6700\u7ec8\u7248\u4ee3\u7801\uff1a</p> <pre><code>/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\n\nint hash(int numsSize,int value){\n    int index=value%numsSize;\n    if(index&lt;0){\n        index+=numsSize;\n    }\n    return index;\n}\nint* twoSum(int* nums, int numsSize, int target, int* returnSize) {\n    int *result=(int *)malloc(2*sizeof(int));\n    typedef struct node{\n        int value;\n        int key;\n        struct node *next;\n    } node;\n    node **list=(node **)malloc(sizeof(node *)*numsSize);\n    for(int i=0;i&lt;numsSize;i++){\n        list[i]=NULL;\n    }\n    for(int i=0;i&lt;numsSize;i++){\n        int complement=target-nums[i];\n        int index=hash(numsSize,complement);\n        node *current=list[index];\n        while(current!=NULL){\n            if(current-&gt;value==complement){\n                result[0]=i;\n                result[1]=current-&gt;key;\n                *returnSize=2;\n                return result;\n            }\n            current=current-&gt;next;\n        }\n        int index_i=hash(numsSize,nums[i]);\n        node *snode=(node *)malloc(sizeof(node));\n        snode-&gt;value=nums[i];\n        snode-&gt;key=i;\n        snode-&gt;next=list[index_i];\n        list[index_i]=snode;\n    }\n    return result;\n}\n</code></pre> <p>\u603b\u7ed3\uff1a\u4f20\u7edf\u7684\u67e5\u627e\u65b9\u5f0f\u4e3a\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(n^2)</code>\uff0c\u800c\u54c8\u5e0c\u8868\u67e5\u627e\u66f4\u52a0\u9ad8\u6548\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a<code>O(n)</code>\u3002</p>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%93%E9%A2%98/#leetcode-217","title":"LeetCode 217: \u5b58\u5728\u91cd\u590d\u5143\u7d20","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 <code>nums</code> \u3002\u5982\u679c\u4efb\u4e00\u503c\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0 \u81f3\u5c11\u4e24\u6b21 \uff0c\u8fd4\u56de <code>true</code> \uff1b\u5982\u679c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u4e92\u4e0d\u76f8\u540c\uff0c\u8fd4\u56de <code>false</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,2,3,1] \u8f93\u51fa\uff1atrue</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,2,3,4] \u8f93\u51fa\uff1afalse</p> <p>\u793a\u4f8b 3\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,1,1,3,3,4,3,2,4,2] \u8f93\u51fa\uff1atrue</p> <p>\u4e0e\u6b64\u76f8\u4f3c\u7684\u8fd8\u6709\u7b2c217\u9898\uff0c\u6bd4\u8f83\u7c7b\u4f3c\u6240\u4ee5\u4e0d\u5355\u72ec\u5199\u611f\u609f\uff0c\u4e0b\u9762\u76f4\u63a5\u7ed9\u51fa\u672c\u4eba\u7684\u4ee3\u7801\uff1a</p> <pre><code>int hash(int numsSize,int value){\n    int index;\n    index=value%numsSize;\n    if(index&lt;0){\n        index+=numsSize;\n    }\n    return index;\n}\nbool containsDuplicate(int* nums, int numsSize) {\n    typedef struct node{\n        int value;\n        struct node *next;\n    }node;\n    node **hashtable=(node **)malloc(sizeof(node *)*numsSize);\n    for(int i=0;i&lt;numsSize;i++){\n        hashtable[i]=NULL;\n    }\n    for(int i=0;i&lt;numsSize;i++){\n        int index=hash(numsSize,nums[i]);\n        node *current=hashtable[index];\n        while(current!=NULL){\n            if(current-&gt;value==nums[i]){\n                return true;\n            }\n            current=current-&gt;next;\n        }\n        node *newnode=(node *)malloc(sizeof(node));\n        newnode-&gt;value=nums[i];\n        newnode-&gt;next=hashtable[index];\n        hashtable[index]=newnode;\n\n    }\n    return false;\n\n\n}\n</code></pre>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%93%E9%A2%98/#leetcode-242","title":"LeetCode 242: \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd","text":"<p>\u9898\u76ee</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 <code>s</code> \u548c <code>t</code> \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad <code>t</code> \u662f\u5426\u662f <code>s</code> \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</p> <p>\u6ce8\u610f\uff1a \u82e5 <code>s</code> \u548c <code>t</code> \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u76f8\u540c\uff0c\u5219\u79f0 <code>s</code> \u548c <code>t</code> \u4e92\u4e3a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</p> <p>\u793a\u4f8b 1:</p> <p>\u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true</p> <p>\u793a\u4f8b 2:</p> <p>\u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false</p> <pre><code>int hash(char s,int size){\n    int idx=s-'a';\n    idx%=size;\n    return idx;\n}\nbool isAnagram(char* s, char* t) {\n    int size=26;\n    typedef struct node{\n        char val;\n        struct node* next;\n    }node;\n    node **hashtable=(node **)malloc(sizeof(node *)*size);\n    for(int i=0;i&lt;size;i++){\n        hashtable[i]=NULL;\n    }\n    int len=strlen(s);\n    for(int i=0;i&lt;len;i++){\n        int idx=hash(s[i],size);\n        node *newnode=(node *)malloc(sizeof(node));\n        newnode-&gt;val=s[i];\n        newnode-&gt;next=hashtable[idx];\n        hashtable[idx]=newnode;\n    }\n    int len_t=strlen(t);\n    if(len!=len_t){\n        return false;\n    }\n    for(int j=0;j&lt;len_t;j++){\n        int idx=hash(t[j],size);\n        if(hashtable[idx]==NULL){\n            return false;\n        }else{\n            hashtable[idx]=hashtable[idx]-&gt;next;\n        }\n\n    }\n    return true;\n}\n</code></pre>"},{"location":"02-HPC/lab1-MiniCluster/lab1/","title":"Lab1: \u8ff7\u4f60\u8ba1\u7b97\u96c6\u7fa4\u642d\u5efa\u53caHPL\u6027\u80fd\u6d4b\u8bd5","text":"<p>\u63d0\u793a</p> <p>\u5177\u4f53\u7ec6\u8282\u8bf7\u70b9\u51fb\u4e0b\u65b9\u6309\u94ae\u8fdb\u5165\u6211\u7684GitHub\u4ed3\u5e93\u67e5\u770b</p> <p>-&gt; GitHub \u6e90\u7801</p> <p>\u5b9e\u9a8c\u8005\uff1a \u82cf\u6613\u6587 (\u5b66\u53f7: 3240103466) \u65e5\u671f\uff1a 2025\u5e746\u6708  </p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_1","title":"\ud83d\udccc \u9879\u76ee\u6982\u8ff0","text":"<p>\u672c\u5b9e\u9a8c\u901a\u8fc7VMware\u865a\u62df\u673a\u4ece\u96f6\u642d\u5efa\u4e86\u4e00\u4e2a\u542b4\u4e2a\u8ba1\u7b97\u8282\u70b9\u7684\u8ff7\u4f60\u9ad8\u6027\u80fd\u8ba1\u7b97\u96c6\u7fa4\uff0c\u5e76\u8fdb\u884c\u4e86\u5168\u9762\u7684HPL (High-Performance Linpack) \u57fa\u51c6\u6d4b\u8bd5\u3002\u9879\u76ee\u6db5\u76d6\u4e86\u4ece\u96c6\u7fa4\u67b6\u6784\u8bbe\u8ba1\u3001\u8f6f\u4ef6\u73af\u5883\u642d\u5efa\u3001\u5e76\u884c\u8ba1\u7b97\u6846\u67b6\u914d\u7f6e\u5230\u6027\u80fd\u4f18\u5316\u7684\u5b8c\u6574\u5b9e\u8df5\u6d41\u7a0b\u3002</p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_2","title":"\ud83c\udfaf \u5b9e\u9a8c\u76ee\u6807","text":"<ul> <li>\u638c\u63e1\u9ad8\u6027\u80fd\u8ba1\u7b97\u96c6\u7fa4\u7684\u642d\u5efa\u6d41\u7a0b</li> <li>\u7406\u89e3\u5e76\u884c\u8ba1\u7b97\u6846\u67b6OpenMPI\u7684\u5de5\u4f5c\u539f\u7406</li> <li>\u5b66\u4e60HPL\u57fa\u51c6\u6d4b\u8bd5\u7684\u914d\u7f6e\u4e0e\u4f18\u5316</li> <li>\u5206\u6790\u4e0d\u540c\u53c2\u6570\u5bf9\u8ba1\u7b97\u6027\u80fd\u7684\u5f71\u54cd</li> <li>\u57f9\u517b\u7cfb\u7edf\u6027\u80fd\u8c03\u4f18\u7684\u5b9e\u8df5\u80fd\u529b</li> </ul>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_3","title":"\u2699\ufe0f \u6280\u672f\u6808\u4e0e\u73af\u5883","text":""},{"location":"02-HPC/lab1-MiniCluster/lab1/#_4","title":"\u786c\u4ef6\u73af\u5883","text":"<ul> <li>\u865a\u62df\u5316\u5e73\u53f0: VMware Workstation Pro</li> <li>\u96c6\u7fa4\u89c4\u6a21: 4\u4e2a\u8ba1\u7b97\u8282\u70b9</li> <li>\u8282\u70b9\u914d\u7f6e: \u6bcf\u8282\u70b92\u6838CPU + 2GB\u5185\u5b58</li> <li>\u7f51\u7edc\u914d\u7f6e: VMware NAT\u6a21\u5f0f\uff0c\u9759\u6001IP\u5206\u914d</li> </ul>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_5","title":"\u8f6f\u4ef6\u73af\u5883","text":"<ul> <li>\u64cd\u4f5c\u7cfb\u7edf: Debian 12.2.0</li> <li>\u7f16\u8bd1\u5668: GCC 12.2.0, GFortran</li> <li>\u5e76\u884c\u6846\u67b6: OpenMPI 5.0.3</li> <li>\u6570\u5b66\u5e93: BLAS 3.12.0, CBLAS</li> <li>\u57fa\u51c6\u6d4b\u8bd5: HPL 2.3</li> <li>\u5f00\u53d1\u5de5\u5177: Make, Python 3.x, matplotlib</li> </ul>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_6","title":"\ud83c\udfd7\ufe0f \u9879\u76ee\u7ed3\u6784","text":"<pre><code>lab1/\n\u251c\u2500\u2500 README.md                    # \u9879\u76ee\u8bf4\u660e\u6587\u6863\n\u251c\u2500\u2500 report/                      # \u5b9e\u9a8c\u62a5\u544a\n\u2502   \u251c\u2500\u2500 report.md               # Markdown\u683c\u5f0f\u62a5\u544a\n\u2502   \u251c\u2500\u2500 \u300a\u8ff7\u4f60\u8ba1\u7b97\u96c6\u7fa4\u642d\u5efa\u53caHPL\u6027\u80fd\u6d4b\u8bd5\u300b\u9879\u76ee\u62a5\u544a.pdf\n\u2502   \u2514\u2500\u2500 image.png               # \u62a5\u544a\u4e2d\u7684\u56fe\u8868\n\u251c\u2500\u2500 code/                       # \u6570\u636e\u53ef\u89c6\u5316\u4ee3\u7801\n\u2502   \u251c\u2500\u2500 hpl_n_vs_gflops_plot.py       # N vs Gflops \u6027\u80fd\u56fe\u8868\n\u2502   \u251c\u2500\u2500 plot_nb_vs_gflops.py          # NB vs Gflops \u6027\u80fd\u56fe\u8868\n\u2502   \u2514\u2500\u2500 plot_n_and_nb_vs_gflops.py    # \u5bf9\u6bd4\u56fe\u8868\n\u251c\u2500\u2500 result/                     # \u6d4b\u8bd5\u7ed3\u679c\n\u2502   \u2514\u2500\u2500 hpl_output.txt          # HPL\u5b8c\u6574\u6d4b\u8bd5\u8f93\u51fa\n\u2514\u2500\u2500 assets/                     # \u751f\u6210\u7684\u56fe\u8868\u8d44\u6e90\n    \u251c\u2500\u2500 hpl_n_vs_gflops_plot.png\n    \u251c\u2500\u2500 plot_nb_vs_gflops.png\n    \u2514\u2500\u2500 compare.png\n</code></pre>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_7","title":"\ud83d\ude80 \u6838\u5fc3\u6210\u679c","text":""},{"location":"02-HPC/lab1-MiniCluster/lab1/#_8","title":"\u6700\u4f18\u6027\u80fd\u6307\u6807","text":"<ul> <li>\u5cf0\u503c\u6027\u80fd: 3.1339 Gflops</li> <li>\u6700\u4f18\u914d\u7f6e: N=2000, NB=224, P\u00d7Q=2\u00d75</li> <li>\u8fd0\u884c\u65f6\u95f4: 1.70\u79d2</li> <li>\u6d4b\u8bd5\u901a\u8fc7\u7387: 100% (72/72\u6d4b\u8bd5\u7528\u4f8b\u901a\u8fc7)</li> </ul>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_9","title":"\u6027\u80fd\u5206\u6790\u7ed3\u679c","text":""},{"location":"02-HPC/lab1-MiniCluster/lab1/#1-n","title":"1. \u95ee\u9898\u89c4\u6a21N\u7684\u5f71\u54cd\u5206\u6790","text":"<p>\u6d4b\u8bd5\u914d\u7f6e: \u56fa\u5b9aNB=128, P=2, Q=5</p> \u95ee\u9898\u89c4\u6a21 N \u6027\u80fd (Gflops) \u6027\u80fd\u63d0\u5347 500 0.24072 \u57fa\u51c6 1000 0.85795 +256% 1500 1.6817 +96% 2000 2.5377 +51% <p>\u5206\u6790: \u968f\u7740\u95ee\u9898\u89c4\u6a21\u589e\u5927\uff0c\u8ba1\u7b97\u5bc6\u5ea6\u63d0\u9ad8\uff0c\u901a\u4fe1\u5f00\u9500\u76f8\u5bf9\u51cf\u5c11\uff0c\u6027\u80fd\u663e\u8457\u63d0\u5347\u3002</p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#2-nb","title":"2. \u5206\u5757\u5927\u5c0fNB\u7684\u5f71\u54cd\u5206\u6790","text":"<p>\u6d4b\u8bd5\u914d\u7f6e: \u56fa\u5b9aN=2000, P=2, Q=5</p> \u5206\u5757\u5927\u5c0f NB \u6027\u80fd (Gflops) \u76f8\u5bf9\u6700\u4f18\u6027\u80fd 32 2.0376 65.0% 64 2.2678 72.4% 96 2.6805 85.5% 128 2.5053 79.9% 160 2.6498 84.6% 192 2.8955 92.4% 224 3.1339 100% 256 3.0896 98.6% <p>\u5206\u6790: \u5206\u5757\u5927\u5c0f\u5b58\u5728\u6700\u4f18\u70b9\uff0cNB=224\u65f6\u8fbe\u5230\u5cf0\u503c\u6027\u80fd\u3002\u8fc7\u5c0f\u7684\u5206\u5757\u5bfc\u81f4\u8ba1\u7b97\u6548\u7387\u4f4e\uff0c\u8fc7\u5927\u7684\u5206\u5757\u53ef\u80fd\u5f71\u54cd\u7f13\u5b58\u6548\u7387\u3002</p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_10","title":"\ud83d\udcca \u53ef\u89c6\u5316\u5206\u6790","text":"<p>\u9879\u76ee\u5305\u542b\u4e09\u4e2a\u4e3b\u8981\u7684\u6570\u636e\u53ef\u89c6\u5316\u811a\u672c\uff1a</p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#1-hpl_n_vs_gflops_plotpy","title":"1. <code>hpl_n_vs_gflops_plot.py</code>","text":"<ul> <li>\u751f\u6210\u95ee\u9898\u89c4\u6a21N\u4e0e\u6027\u80fd\u7684\u5173\u7cfb\u56fe</li> <li>\u5c55\u793a\u8ba1\u7b97\u89c4\u6a21\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u8d8b\u52bf</li> </ul>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#2-plot_nb_vs_gflopspy","title":"2. <code>plot_nb_vs_gflops.py</code>","text":"<ul> <li>\u751f\u6210\u5206\u5757\u5927\u5c0fNB\u4e0e\u6027\u80fd\u7684\u5173\u7cfb\u56fe</li> <li>\u8bc6\u522b\u6700\u4f18\u5206\u5757\u5927\u5c0f\u53c2\u6570</li> </ul>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#3-plot_n_and_nb_vs_gflopspy","title":"3. <code>plot_n_and_nb_vs_gflops.py</code>","text":"<ul> <li>\u751f\u6210N\u548cNB\u5bf9\u6bd4\u5206\u6790\u56fe\u8868</li> <li>\u4fbf\u4e8e\u6574\u4f53\u6027\u80fd\u5206\u6790\u548c\u53c2\u6570\u4f18\u5316</li> </ul>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_11","title":"\ud83d\udd27 \u4f7f\u7528\u65b9\u6cd5","text":""},{"location":"02-HPC/lab1-MiniCluster/lab1/#_12","title":"\u73af\u5883\u51c6\u5907","text":"<pre><code># \u5b89\u88c5Python\u4f9d\u8d56\npip install matplotlib\n\n# \u6216\u4f7f\u7528\u9879\u76ee\u914d\u7f6e\u7684Python\u73af\u5883\npython -m pip install matplotlib\n</code></pre>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_13","title":"\u8fd0\u884c\u53ef\u89c6\u5316\u811a\u672c","text":"<pre><code># \u5207\u6362\u5230lab1\u76ee\u5f55\ncd lab1\n\n# \u751f\u6210N vs Gflops\u56fe\u8868\npython code/hpl_n_vs_gflops_plot.py\n\n# \u751f\u6210NB vs Gflops\u56fe\u8868  \npython code/plot_nb_vs_gflops.py\n\n# \u751f\u6210\u5bf9\u6bd4\u56fe\u8868\npython code/plot_n_and_nb_vs_gflops.py\n</code></pre> <p>\u751f\u6210\u7684\u56fe\u8868\u5c06\u81ea\u52a8\u4fdd\u5b58\u5230 <code>assets/</code> \u76ee\u5f55\u4e0b\u3002</p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_14","title":"\u26a0\ufe0f \u5173\u952e\u6280\u672f\u6311\u6218\u4e0e\u89e3\u51b3\u65b9\u6848","text":""},{"location":"02-HPC/lab1-MiniCluster/lab1/#1-hpl","title":"\u6311\u62181: HPL\u7f16\u8bd1\u94fe\u63a5\u5931\u8d25","text":"<p>\u95ee\u9898: <code>undefined reference to _gfortran_...</code> \u9519\u8bef \u539f\u56e0: mpicc\u94fe\u63a5BLAS\u65f6\u7f3a\u5931Fortran\u8fd0\u884c\u5e93 \u89e3\u51b3: \u5728Makefile\u4e2d\u6dfb\u52a0 <code>-lgfortran</code> \u94fe\u63a5\u9009\u9879</p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#2-cblas","title":"\u6311\u62182: CBLAS\u6d4b\u8bd5\u7a0b\u5e8f\u7f16\u8bd1\u62a5\u9519","text":"<p>\u95ee\u9898: testing/\u76ee\u5f55\u4ee3\u7801\u4e0egfortran/BLAS\u7248\u672c\u4e0d\u517c\u5bb9 \u89e3\u51b3: \u8df3\u8fc7\u6d4b\u8bd5\u7a0b\u5e8f\uff0c\u76f4\u63a5\u4f7f\u7528\u751f\u6210\u7684 <code>cblas_LINUX.a</code> \u5e93</p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#3","title":"\u6311\u62183: \u96c6\u7fa4\u7f51\u7edc\u914d\u7f6e","text":"<p>\u95ee\u9898: SSH\u514d\u5bc6\u767b\u5f55\u914d\u7f6e\u548c\u4e3b\u673a\u540d\u89e3\u6790 \u89e3\u51b3: \u914d\u7f6e <code>/etc/hosts</code> \u9759\u6001\u89e3\u6790\uff0c\u751f\u6210\u5e76\u5206\u53d1SSH\u5bc6\u94a5</p>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_15","title":"\ud83d\udcc8 \u6027\u80fd\u4f18\u5316\u5efa\u8bae","text":"<ol> <li>\u5185\u5b58\u914d\u7f6e: \u6839\u636e\u95ee\u9898\u89c4\u6a21\u5408\u7406\u5206\u914d\u5185\u5b58\uff0c\u907f\u514d\u5185\u5b58\u4e0d\u8db3\u5f71\u54cd\u6027\u80fd</li> <li>\u7f51\u7edc\u4f18\u5316: \u4f7f\u7528\u9ad8\u901f\u7f51\u7edc\u4e92\u8054\uff0c\u51cf\u5c11\u901a\u4fe1\u5ef6\u8fdf</li> <li>\u8d1f\u8f7d\u5747\u8861: \u4f18\u5316\u8fdb\u7a0b\u7f51\u683c\u914d\u7f6e(P\u00d7Q)\uff0c\u5e73\u8861\u8ba1\u7b97\u4e0e\u901a\u4fe1</li> <li>\u7f13\u5b58\u53cb\u597d: \u9009\u62e9\u5408\u9002\u7684\u5206\u5757\u5927\u5c0f\uff0c\u63d0\u9ad8\u7f13\u5b58\u547d\u4e2d\u7387</li> </ol>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_16","title":"\ud83d\udcda \u5b66\u4e60\u8d44\u6e90","text":"<ul> <li>HPL\u5b98\u65b9\u6587\u6863</li> <li>OpenMPI\u7528\u6237\u6307\u5357</li> <li>BLAS/LAPACK\u53c2\u8003\u624b\u518c</li> </ul>"},{"location":"02-HPC/lab1-MiniCluster/lab1/#_17","title":"\ud83d\udce7 \u8054\u7cfb\u4fe1\u606f","text":"<p>\u5982\u6709\u95ee\u9898\u6216\u5efa\u8bae\uff0c\u8bf7\u8054\u7cfb\uff1a - \u59d3\u540d: \u82cf\u6613\u6587 - \u5b66\u53f7: 3240103466 - \u90ae\u7bb1: 3240103466@zju.edu.cn</p> <p>\u6ce8: \u672c\u9879\u76ee\u4ec5\u7528\u4e8e\u5b66\u672f\u7814\u7a76\u548c\u6559\u5b66\u76ee\u7684\uff0c\u8bf7\u9075\u5b88\u76f8\u5173\u8f6f\u4ef6\u7684\u8bb8\u53ef\u534f\u8bae\u3002</p>"},{"location":"02-HPC/lab1-MiniCluster/reflection/","title":"Reflection","text":""},{"location":"02-HPC/lab1-MiniCluster/reflection/#lab1","title":"lab1 \u5b9e\u9a8c\u5fc3\u5f97","text":"<p>\u4f5c\u4e3a\u4e00\u540d\u6750\u6599\u79d1\u5b66\u4e0e\u5de5\u7a0b\u4e13\u4e1a\u7684\u5927\u4e00\u5b66\u751f\uff0c\u6211\u65e9\u5df2\u4e0b\u5b9a\u51b3\u5fc3\u8f6c\u5411\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a\uff0c\u5e76\u4e14\u672c\u5b66\u671f\u6240\u4fee\u7684\u4e13\u4e1a\u8bfe\u7a0b\u4e5f\u90fd\u662f\u8ba1\u79d1\u65b9\u5411\u7684\uff0c\u5982\u300a\u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528\u300b\u3001\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u57fa\u7840\u300b(FDS)\u4ee5\u53ca\u300a\u6570\u5b57\u903b\u8f91\u8bbe\u8ba1\u300b\u3002\u56e0\u6b64\uff0c\u672c\u6b21\u201c\u8ff7\u4f60\u8ba1\u7b97\u96c6\u7fa4\u642d\u5efa\u53caHPL\u6027\u80fd\u6d4b\u8bd5\u201d\u5b9e\u9a8c\u5bf9\u6211\u800c\u8a00\uff0c\u662f\u4e00\u6b21\u5168\u65b0\u7684\u3001\u5b8c\u5168\u4ece\u96f6\u5f00\u59cb\u7684\u81ea\u5b66\u63a2\u7d22\u8fc7\u7a0b\u3002</p> <p>\u901a\u8fc7\u8fd9\u6b21\u5b9e\u9a8c\uff0c\u6211\u6df1\u523b\u4f53\u4f1a\u5230\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\uff0c\u81ea\u4e3b\u5b66\u4e60\u80fd\u529b\u7684\u91cd\u8981\u6027\u3002\u4ece\u6700\u521d\u5bf9 OpenMPI\u3001BLAS\u3001CBLAS\u3001HPL \u8fd9\u4e9b\u4e13\u4e1a\u540d\u8bcd\u7684\u964c\u751f\uff0c\u5230\u7406\u89e3\u5b83\u4eec\u5404\u81ea\u7684\u4f5c\u7528\uff1b\u4ece\u9762\u5bf9\u6e90\u7801\u7f16\u8bd1\u65f6\u5404\u79cd\u9884\u60f3\u4e0d\u5230\u7684\u4f9d\u8d56\u7f3a\u5931\u3001\u914d\u7f6e\u9519\u8bef\u3001\u94fe\u63a5\u95ee\u9898\uff0c\u5230\u5b66\u4f1a\u9605\u8bfb\u9519\u8bef\u4fe1\u606f\u3001\u4e0a\u7f51\u67e5\u627e\u89e3\u51b3\u65b9\u6848\uff08\u4f8b\u5982\u7f16\u8bd1\u5668\u7f3a\u5931\u3001\u5e93\u94fe\u63a5\u987a\u5e8f\u3001Makefile \u53c2\u6570\u542b\u4e49\u7b49\uff09\uff0c\u6bcf\u4e00\u6b65\u90fd\u5145\u6ee1\u4e86\u6311\u6218\u3002</p> <p>\u867d\u7136\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u8fc7\u7a0b\u6709\u65f6\u786e\u5b9e\u5f88\u201c\u75db\u82e6\u201d\uff0c\u751a\u81f3\u4e00\u5ea6\u8ba9\u6211\u611f\u5230\u6cae\u4e27\uff08\u6bd4\u5982\u591a\u6b21\u5c1d\u8bd5\u4e0b\u8f7dCBLAS\u6e90\u7801\u5305\u5931\u8d25\uff0c\u6216\u8005HPL\u94fe\u63a5\u65f6\u627e\u4e0d\u5230Fortran\u5e93\uff09\uff0c\u4f46\u6bcf\u5f53\u901a\u8fc7\u67e5\u9605\u8d44\u6599\u3001\u7406\u89e3\u539f\u7406\u3001\u52a8\u624b\u5c1d\u8bd5\u5e76\u6700\u7ec8\u653b\u514b\u4e00\u4e2a\u96be\u9898\u65f6\uff0c\u90a3\u79cd\u5b66\u4e60\u5230\u65b0\u77e5\u8bc6\u3001\u638c\u63e1\u65b0\u6280\u80fd\u7684\u6210\u5c31\u611f\u662f\u65e0\u4e0e\u4f26\u6bd4\u7684\u3002\u7279\u522b\u662f\u7ecf\u5386\u201c\u9047\u5230\u56f0\u96be -&gt; \u67e5\u627e\u8d44\u6599/\u6559\u7a0b -&gt; \u5b66\u4e60\u76f8\u5173\u6280\u672f -&gt; \u89e3\u51b3\u95ee\u9898\u201d\u8fd9\u6837\u7684\u5b8c\u6574\u5faa\u73af\u540e\uff0c\u6211\u80fd\u6e05\u6670\u5730\u611f\u89c9\u5230\u81ea\u5df1\u5728\u77e5\u8bc6\u548c\u6280\u80fd\u4e0a\u7684\u98de\u901f\u8fdb\u6b65\uff0c\u5185\u5fc3\u611f\u5230\u975e\u5e38\u5145\u5b9e\u548c\u5f00\u5fc3\u3002\u8fd9\u79cd\u901a\u8fc7\u5b9e\u8df5\u5c06\u7406\u8bba\u77e5\u8bc6\uff08\u6bd4\u5982\u64cd\u4f5c\u7cfb\u7edf\u3001\u7f16\u8bd1\u539f\u7406\u7684\u4e00\u4e9b\u6982\u5ff5\uff09\u4e0e\u5b9e\u9645\u64cd\u4f5c\u7ed3\u5408\u8d77\u6765\u7684\u4f53\u9a8c\uff0c\u8fdc\u6bd4\u5355\u7eaf\u542c\u8bfe\u8981\u6df1\u523b\u5f97\u591a\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u914d\u7f6eHPL\u7684Makefile\u65f6\uff0c\u7406\u89e3TOPdir, MPdir, MPlib, LAlib, LINKER, F2CDEFS\u7b49\u53c2\u6570\u7684\u542b\u4e49\uff0c\u5e76\u6839\u636e\u81ea\u5df1\u7f16\u8bd1\u7684OpenMPI\u3001BLAS\u3001CBLAS\u7684\u5b9e\u9645\u8def\u5f84\u8fdb\u884c\u6b63\u786e\u586b\u5199\uff0c\u6700\u7ec8\u6210\u529f\u94fe\u63a5\u751f\u6210xhpl\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u8ba9\u6211\u5bf9\u8f6f\u4ef6\u7684\u6784\u5efa\u548c\u4f9d\u8d56\u7ba1\u7406\u6709\u4e86\u66f4\u76f4\u89c2\u7684\u8ba4\u8bc6\u3002\u540c\u6837\uff0c\u5728\u642d\u5efa\u865a\u62df\u673a\u96c6\u7fa4\u65f6\uff0c\u914d\u7f6e\u4e3b\u673a\u540d\u3001/etc/hosts\u3001\u4ee5\u53ca\u65e0\u5bc6\u7801SSH\u767b\u5f55\uff0c\u8ba9\u6211\u5bf9\u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u8282\u70b9\u95f4\u901a\u4fe1\u7684\u57fa\u7840\u6709\u4e86\u66f4\u5b9e\u9645\u7684\u64cd\u4f5c\u7ecf\u9a8c\u3002\u540e\u7eed\u7684HPL\u6027\u80fd\u53c2\u6570\u8c03\u4f18\uff0c\u4e5f\u8ba9\u6211\u521d\u6b65\u63a5\u89e6\u5230\u4e86\u6027\u80fd\u6d4b\u8bd5\u548c\u4f18\u5316\u7684\u57fa\u672c\u601d\u8def\u3002</p> <p>\u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u6b21\u5b9e\u9a8c\u4e0d\u4ec5\u8ba9\u6211\u6210\u529f\u642d\u5efa\u4e86\u8ff7\u4f60\u96c6\u7fa4\u5e76\u8fd0\u884c\u4e86HPL\uff0c\u66f4\u91cd\u8981\u7684\u662f\u953b\u70bc\u4e86\u6211\u7684\u81ea\u5b66\u80fd\u529b\u3001\u95ee\u9898\u89e3\u51b3\u80fd\u529b\u548c\u52a8\u624b\u5b9e\u8df5\u80fd\u529b\u3002\u867d\u7136\u8fc7\u7a0b\u66f2\u6298\uff0c\u4f46\u6536\u83b7\u5de8\u5927\u3002\u6211\u975e\u5e38\u671f\u5f85\u672a\u6765\u80fd\u6709\u66f4\u591a\u8fd9\u6837\u7684\u673a\u4f1a\uff0c\u7ee7\u7eed\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u9053\u8def\u4e0a\u63a2\u7d22\u548c\u8fdb\u6b65\u3002</p>"},{"location":"03-Notes-and-Thoughts/git%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/","title":"\u4f7f\u7528git\u7684\u5de5\u4f5c\u6d41\u7a0b","text":"<p>1.\u5728main\u5206\u652f\u91cc\u68c0\u67e5\u662f\u5426\u6709\u66f4\u65b0 <code>git checkout main</code></p> <p>2.\u62c9\u53d6\u66f4\u65b0 <code>git pull origin main</code></p> <p>3.\u521b\u5efa\u5e76\u5207\u6362\u5230\u65b0\u5206\u652f <code>git checkout -b \uff08your new branch)</code></p> <p>4.\u5728\u65b0\u5206\u652f\u4e0a\u8fdb\u884c\u4f60\u60f3\u8981\u7684\u64cd\u4f5c</p> <p>5.\u628a\u6240\u6709\u6539\u52a8\u5148\u52a0\u5230\u201c\u5f85\u63d0\u4ea4\u533a\u201d <code>git add .</code></p> <p>6.\u63d0\u4ea4\uff0c\u540e\u9762\u8ddf\u4e0a\u7b80\u77ed\u7684\u8bf4\u660e <code>git commit -m \"whatever you want to note\"</code></p> <p>\u5173\u4e8e\u8bf4\u660e,\u901a\u5e38\u6709\u4ee5\u4e0b\u51e0\u79cd\u89c4\u8303\uff1a</p> <p><code>feat: Add iterative solution for LeetCode 94</code> (feat = \u65b0\u529f\u80fd)</p> <p><code>fix: Correct variable scope error in maxDepth function</code> (fix = \u4fee\u590dbug)</p> <p><code>docs: Update README with repository navigation</code> (docs = \u53ea\u6539\u4e86\u6587\u6863)</p> <p><code>style: Format C code according to Google Style Guide</code> (style = \u4ee3\u7801\u683c\u5f0f)</p> <p><code>refactor: Improve directory structure for better organization</code> (refactor = \u91cd\u6784)</p> <p>7.\u628a\u7ed3\u679c\u63a8\u9001\u5230\u4e91\u7aef <code>git push origin main</code></p> <p>8.\u672c\u5730\u9884\u89c8 <code>mkdocs serve</code></p> <p>9.\u4e00\u952e\u90e8\u7f72\u7f51\u7ad9 <code>mkdocs gh-deploy</code></p>"}]}