{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230\u6211\u76842025\u6691\u671f\u5b66\u4e60\u4e4b\u65c5","text":"<p>\u63d0\u793a</p> <p>\u70b9\u51fb\u53f3\u4e0a\u89d2/,\u5373\u53ef\u5207\u6362\u4eae\u8272\u6216\u6697\u8272\u6a21\u5f0f\uff08\u4e2a\u4eba\u559c\u6b22\u4eae\u8272\uff09</p> <p>\u4f60\u597d\uff0c\u6211\u662f \u82cf\u6613\u6587\uff0c\u5b5f\u6ee1\u5206\u4ed6\u7239\u3002</p> <p>\u8fd9\u662f\u6211\u4e3a\u4e86\u8bb0\u5f55\u57282025\u5e74\u6691\u5047\u671f\u95f4\uff0c\u4e3a\u4ece\u6750\u6599\u79d1\u5b66\u4e0e\u5de5\u7a0b\u4e13\u4e1a\u8f6c\u5411\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a\u6240\u505a\u7684\u5b66\u4e60\u548c\u52aa\u529b\u800c\u521b\u5efa\u7684\u7f51\u7ad9\u3002\u5e0c\u671b\u901a\u8fc7\u8fd9\u4e2a\u7f51\u7ad9\u7763\u4fc3\u81ea\u5df1\u5411\u5b5f\u6ee1\u5206\u540c\u5b66\u5b66\u4e60\u3002</p> <p>\u672c\u7f51\u7ad9\u7531 MkDocs \u548c Material for MkDocs \u5f3a\u529b\u9a71\u52a8\u3002</p> \u7279\u522b\u6ce8\u610f <p>\u672c\u4eba\u4e0e2025\u5e747\u67085\u65e5\u6b63\u5f0f\u642d\u5efa\u8be5\u7f51\u7ad9\uff0c\u5b58\u5728\u8bf8\u591a\u95ee\u9898\uff0c\u6240\u4ee5\u4ec5\u9762\u5411\u5404\u4f4d\u4eb2\u53cb\u5f00\u653e\uff0c\u540e\u7eed\u4f1a\u8fdb\u4e00\u6b65\u8fdb\u884c\u4f18\u5316\uff0c\u5728\u6b64\u4e4b\u524d\u8bf7\u4e0d\u8981\u5916\u4f20\uff0c\u8c22\u8c22\uff01</p>"},{"location":"#_1","title":"\u5feb\u901f\u5bfc\u822a","text":"<p>\u5728\u8fd9\u91cc\uff0c\u4f60\u53ef\u4ee5\u627e\u5230\u6211\u5728\u5404\u4e2a\u65b9\u5411\u4e0a\u7684\u5b66\u4e60\u7b14\u8bb0\u548c\u9879\u76ee\u53cd\u601d\uff1a</p> <ul> <li>\u7b97\u6cd5\u5b66\u4e60: \u524d\u5f80 <code>01-Algorithms</code></li> <li>HPC \u5b9e\u9a8c: \u524d\u5f80 <code>02-HPC</code></li> <li>\u968f\u7b14\u4e0e\u601d\u8003: \u524d\u5f80 <code>03-Notes-and-Thoughts</code></li> </ul> <p>\u4e0d\u8981\u8bef\u4f1a\uff01</p> <p>\u6691\u5047\u4f0a\u59cb\uff0c\u672c\u4eba\u6c89\u6d78\u5728\u5047\u65e5\u7684\u559c\u60a6\u4e2d\u65e0\u6cd5\u81ea\u62d4,\u505a\u8fd9\u4e2a\u7f51\u7ad9\u7eaf\u7cb9\u51fa\u4e8e\u5a31\u4e50\u76ee\u7684\uff0c\u91cc\u9762\u7684\u7ecf\u5386\u5168\u90e8\u7531<code>Gemini 2.5pro</code>\u751f\u6210!\u672c\u4eba\u5e76\u6ca1\u6709\u5176\u4e2d\u63d0\u5230\u7684\u4efb\u4f55\u7ecf\u5386\uff01\uff01\uff08mky\u53ef\u80fd\u6709\uff09\uff0c\u4ec5\u4f9b\u5a31\u4e50\uff0c\u5207\u52ff\u5f53\u771f\uff0c\u8c22\u8c22~~</p> <p>\u4ec0\u4e48\uff1f\u89c9\u5f97\u4e3b\u64ad\u7684\u7f51\u7ad9\u6709\u5f85\u6539\u8fdb\u6c61\u67d3\u4e86\u4f60\u7684\u773c\u775b\uff1f\u626b\u63cf\u4e0b\u65b9\u4e8c\u7ef4\u7801\u5e76\u8f93\u5165\u5bc6\u7801\u5373\u53ef\u5f97\u5230\u4e3b\u64ad\u76845\u5143\u8d54\u507f </p>"},{"location":"01-Algorithms/","title":"\u524d\u8a00","text":"<p>\u8fd9\u90e8\u5206\u4e3b\u8981\u8bb0\u5f55\u4e86\u672c\u4eba\u5728\u7b97\u6cd5\u4e16\u754c\u7684\u63a2\u7d22\u65c5\u7a0b\uff0c\u5206\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u90e8\u5206\uff1a</p> <p>1.\u4ee5<code>20xx-xx-xx</code>\u6253\u5934\u7684\u90e8\u5206\u5b58\u5728\u4e8e<code>Everyday reflection</code>\u4e2d\uff0c\u8bb0\u5f55\u4e86\u6211\u5f53\u5929\u7684\u5237\u9898\u5fc3\u5f97\uff0c\u5e76\u5728\u7ed3\u5c3e\u9644\u4e0a\u4e86\u5bf9\u5e94\u7684\u9898\u53f7\u548c\u4ee3\u7801</p> <p>2.\u4ee5<code>Leetcodexx</code>\u6253\u5934\u7684\u90e8\u5206 \u6682\u65f6 \u5b58\u5728\u4e8e<code>\u9898\u76ee\u4e0e\u89e3\u6cd5\u6c47\u603b</code>\u90e8\u5206\u4e2d\uff0c\u8bb0\u5f55\u4e86\u5177\u4f53\u7684\u9898\u76ee\u3001\u5bf9\u5e94\u7684\u94fe\u63a5\u3001\u4ee5\u53ca\u6211\u7684\u4ee3\u7801\uff08\u53ef\u80fd\u6709\u591a\u79cd\u89e3\u6cd5\uff09\uff0c\u90e8\u5206\u6709\u4ef7\u503c\u7684\u9898\u76ee\u8fd8\u4f1a\u9644\u4e0a\u6211\u7684\u5fc3\u5f97\u3002</p>"},{"location":"01-Algorithms/Everyday_reflection/2025-07-04/","title":"2025 07 04","text":""},{"location":"01-Algorithms/Everyday_reflection/2025-07-04/#_1","title":"\u5b66\u4e60\u65e5\u5fd7\uff1a\u5728\u4e8c\u53c9\u6811\u7684\u8ff7\u5bab\u4e2d\uff0c\u4ece\u8ff7\u8def\u5230\u7ed8\u5236\u5730\u56fe","text":"<p>\u65e5\u671f: 2025\u5e747\u67084\u65e5\uff0c\u4e00\u4e2a\u4ece\u8ff7\u60d1\u8d70\u5411\u6e05\u9192\u7684\u591c\u665a</p> <p>\u672c\u65e5\u76ee\u6807: \u771f\u6b63\u201c\u5403\u900f\u201d\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff0c\u4e0d\u4ec5\u4f1a\u80cc\uff0c\u66f4\u80fd\u7406\u89e3\u5176\u9012\u5f52\u4e0e\u8fed\u4ee3\u7684\u672c\u8d28\u3002</p>"},{"location":"01-Algorithms/Everyday_reflection/2025-07-04/#_2","title":"\u5b66\u4e60\u8f68\u8ff9\u4e0e\u5fc3\u8def\u5386\u7a0b","text":"<p>\u4eca\u665a\u7684\u5237\u9898\u4e4b\u65c5\uff0c\u5c31\u50cf\u4e00\u6b21\u5728\u9ed1\u6697\u68ee\u6797\u91cc\u7684\u63a2\u9669\u3002\u4e00\u5f00\u59cb\u6211\u4ee5\u4e3a\u81ea\u5df1\u5e26\u7740\u5730\u56fe\uff0c\u7ed3\u679c\u53d1\u73b0\u62ff\u53cd\u4e86\uff0c\u515c\u515c\u8f6c\u8f6c\uff0c\u6700\u7ec8\u624d\u5728\u78d5\u78d5\u7eca\u7eca\u4e2d\u627e\u5230\u4e86\u6b63\u786e\u7684\u65b9\u5411\u3002</p> <p>\u7b2c\u4e00\u7ad9\uff1a\u5728\u9012\u5f52\u7684\u4f18\u96c5\u4e0e\u9677\u9631\u4e2d\u6323\u624e</p> <ul> <li>LeetCode 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 (\u9012\u5f52)</li> <li>\u521d\u4f53\u9a8c\uff1a \u6211\u72af\u4e86\u4e00\u4e2a\u5178\u578b\u7684\u521d\u5b66\u8005\u9519\u8bef\u2014\u2014\u8fc7\u5ea6\u8bbe\u8ba1\u3002\u8bd5\u56fe\u7528\u590d\u6742\u7684<code>if-else</code>\u53bb\u9884\u5224\u6240\u6709\u53ef\u80fd\uff0c\u7ed3\u679c\u5199\u51fa\u4e86\u4e00\u5768\u81ea\u5df1\u90fd\u770b\u4e0d\u61c2\u7684\u5783\u573e\u3002\u8fd9\u8ba9\u6211\u610f\u8bc6\u5230\uff0c\u6211\u5bf9\u9012\u5f52\u7684\u7406\u89e3\u4ec5\u4ec5\u505c\u7559\u5728\u201c\u8c03\u7528\u81ea\u5df1\u201d\u7684\u8868\u9762\u3002</li> <li>LeetCode 144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 &amp; LeetCode 145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386</li> <li>\u987f\u609f\u65f6\u523b\uff1a \u5728\u88ab\u70b9\u9192\u540e\uff0c\u6211\u624d\u660e\u767d\u9012\u5f52\u7684\u7cbe\u9ad3\u5728\u4e8e\u4fe1\u4efb\u3002\u4f60\u53ea\u9700\u8981\u5b9a\u4e49\u597d\u201c\u5f53\u524d\u201d\u8fd9\u4e00\u5c42\u7684\u52a8\u4f5c\uff0c\u7136\u540e\u628a\u5269\u4e0b\u7684\u4ea4\u7ed9\u5b50\u8c03\u7528\u3002\u8fde\u7eed\u653b\u514b\u8fd9\u4e24\u9898\u540e\uff0c\u6211\u624d\u771f\u6b63\u770b\u5230\uff0c\u8fd9\u4e09\u79cd\u904d\u5386\u4e0d\u8fc7\u662f\u201c\u5de6\u3001\u53f3\u3001\u6839\u201d\u4e09\u4e2a\u79ef\u6728\u5757\u7684\u4e0d\u540c\u6392\u5217\u7ec4\u5408\uff0c\u4f18\u96c5\u4e14\u5f3a\u5927\u3002</li> </ul> <p>\u7b2c\u4e8c\u7ad9\uff1a\u8ba9\u9012\u5f52\u201c\u5f00\u53e3\u8bf4\u8bdd\u201d</p> <ul> <li>LeetCode 104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6</li> <li>\u601d\u7ef4\u5347\u7ea7\uff1a \u8fd9\u9053\u9898\u4e0d\u518d\u662f\u7b80\u5355\u7684\u201c\u8d70\u4e00\u904d\u201d\uff0c\u800c\u662f\u9700\u8981\u9012\u5f52\u51fd\u6570\u201c\u5e26\u56de\u60c5\u62a5\u201d\u3002\u6211\u5fc5\u987b\u7406\u89e3<code>return</code>\u7684\u610f\u4e49\u2014\u2014\u5b83\u662f\u5b50\u95ee\u9898\u5411\u7236\u95ee\u9898\u4f20\u9012\u7b54\u6848\u7684\u552f\u4e00\u901a\u9053\u3002<code>depth = 1 + max(left_depth, right_depth)</code>\u8fd9\u4e2a\u7b80\u5355\u7684\u516c\u5f0f\u80cc\u540e\uff0c\u662f\u6574\u4e2a\u9012\u5f52\u8c03\u7528\u6808\u81ea\u5e95\u5411\u4e0a\u7684\u4fe1\u606f\u6c47\u603b\u3002</li> <li>\u60e8\u75db\u6559\u8bad\uff1a \u5728\u8fd9\u91cc\uff0c\u6211\u8e29\u4e86\u4e00\u4e2aC\u8bed\u8a00\u7684\u8bed\u6cd5\u5929\u5751\u2014\u2014\u53d8\u91cf\u4f5c\u7528\u57df\u3002\u4e00\u4e2a\u5728<code>if</code>\u540e\u65e0\u62ec\u53f7\u58f0\u660e\u7684\u53d8\u91cf\uff0c\u751f\u547d\u5468\u671f\u4ec5\u6709\u4e00\u884c\u3002\u8fd9\u4e2abug\u8ba9\u6211\u660e\u767d\uff0c\u4ee3\u7801\u7684\u5065\u58ee\u6027\u6765\u81ea\u826f\u597d\u7684\u7f16\u7801\u4e60\u60ef\uff0c\u800c\u4e0d\u662f\u4fa5\u5e78\u3002</li> </ul> <p>\u7b2c\u4e09\u7ad9\uff1a\u4eb2\u624b\u642d\u5efa\u9012\u5f52\u7684\u201c\u811a\u624b\u67b6\u201d</p> <ul> <li>LeetCode 94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 (\u8fed\u4ee3)</li> <li>\u7ec8\u6781\u6311\u6218\uff1a \u88ab\u7981\u6b62\u4f7f\u7528\u9012\u5f52\u540e\uff0c\u6211\u624d\u88ab\u8feb\u53bb\u76f4\u9762\u5b83\u7684\u5e95\u5c42\u539f\u7406\u2014\u2014\u6808\u3002\u6211\u6700\u521d\u624b\u52a8\u6a21\u62df\u7684\u7248\u672c\uff0c\u5145\u6ee1\u4e86\u5197\u4f59\u548c\u8865\u4e01\uff0c\u50cf\u4e2a\u6447\u6447\u6b32\u5760\u7684\u8fdd\u7ae0\u5efa\u7b51\u3002</li> <li>\u62e8\u4e91\u89c1\u65e5\uff1a \u5728\u5b66\u4e60\u4e86\u6807\u51c6\u89e3\u6cd5\u540e\uff0c\u6211\u624d\u7406\u89e3\u4e86\u8fed\u4ee3\u904d\u5386\u7684\u7075\u9b42\uff1a\u4e00\u4e2a<code>curr</code>\u6307\u9488\u8d1f\u8d23\u63a2\u7d22\uff0c\u4e00\u4e2a<code>stack</code>\u8d1f\u8d23\u8bb0\u5f55\u5c94\u8def\u53e3\u3002<code>while (curr != NULL || !stack.isEmpty())</code>\u8fd9\u4e2a\u6761\u4ef6\u5224\u65ad\uff0c\u5982\u540c\u4e00\u76cf\u660e\u706f\uff0c\u7167\u4eae\u4e86\u6574\u4e2a\u7b97\u6cd5\u7684\u6d41\u7a0b\u3002\u4eb2\u624b\u5b9e\u73b0\u4e00\u904d\uff0c\u8fdc\u6bd4\u770b\u5341\u904d\u89e3\u91ca\u6765\u5f97\u6df1\u523b\u3002</li> </ul>"},{"location":"01-Algorithms/Everyday_reflection/2025-07-04/#_3","title":"\u6211\u7684\u4ee3\u7801","text":"<p>\u4e0b\u9762\u5c55\u793a\u4e00\u4e0b\u6211\u5728Leetcode\u4e0a\u5199\u7684\u4ee3\u7801\uff0c\u4f9b\u81ea\u5df1\u56de\u987e\u4e0e\u53cd\u601d  :</p> 94-\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386104-\u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6145-\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 <pre><code>  /**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\n\n\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    struct TreeNode** stack=(struct TreeNode**)malloc(sizeof(struct TreeNode*)*2000);\n    *returnSize=0;\n    int *res=(int *)malloc(sizeof(int )*2999);\n    int top=-1;\n    if(root==NULL){\n        return NULL;\n    }\n    stack[++top]=root;\n    root=root-&gt;left;\n    while(top&gt;-1){\n        while(root!=NULL){\n            stack[++top]=root;\n            root=root-&gt;left;\n        }\n        root=stack[top--];\n        res[(*returnSize)++]=root-&gt;val;\n        root=root-&gt;right;\n        if(root!=NULL){\n            stack[++top]=root;\n            root=root-&gt;left;\n        }\n    }\n    return res;\n}\n</code></pre> <pre><code>  /**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n\nint maxDepth(struct TreeNode* root) {\n    if(root ==NULL)\n      return 0;\n    int rightmax=maxDepth(root-&gt;right)+1;\n    int leftmax=maxDepth(root-&gt;left)+1;\n    return leftmax&gt;rightmax?leftmax:rightmax;\n\n}\n</code></pre> <pre><code>/**\n* Definition for a binary tree node.\n* struct TreeNode {\n*     int val;\n*     struct TreeNode *left;\n*     struct TreeNode *right;\n* };\n*/\n/**\n* Note: The returned array must be malloced, assume caller calls free().\n*/\nvoid post(struct TreeNode* root, int* res, int* returnSize){\n    if(root==NULL){\n        return;\n    }\n    post(root-&gt;left,res,returnSize);\n    post(root-&gt;right,res,returnSize);\n    res[(*returnSize)++]=root-&gt;val;\n}\nint* postorderTraversal(struct TreeNode* root, int* returnSize) {\n    *returnSize=0;\n    int *res=(int *)malloc(sizeof(int)*2999);\n    post(root,res,returnSize);\n    return res;\n}\n</code></pre>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode94-The_inorder_traversal_of_a_binary_tree/","title":"leetcode94 The inorder traversal of a binary tree","text":"Inorder_Traversal_of_a_binary_tree.c<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\n\n\nint* inorderTraversal(struct TreeNode* root, int* returnSize) {\n    struct TreeNode** stack=(struct TreeNode**)malloc(sizeof(struct TreeNode*)*2000);\n    *returnSize=0;\n    int *res=(int *)malloc(sizeof(int )*2999);\n    int top=-1;\n    if(root==NULL){\n        return NULL;\n    }\n    stack[++top]=root;\n    root=root-&gt;left;\n    while(top&gt;-1){\n        while(root!=NULL){\n            stack[++top]=root;\n            root=root-&gt;left;\n        }\n        root=stack[top--];\n        res[(*returnSize)++]=root-&gt;val;\n        root=root-&gt;right;\n        if(root!=NULL){\n            stack[++top]=root;\n            root=root-&gt;left;\n        }\n    }\n    return res;\n}\n</code></pre>"},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","title":"Leetcode98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":""},{"location":"01-Algorithms/%E9%A2%98%E7%9B%AE%E4%B8%8E%E8%A7%A3%E6%B3%95%E6%B1%87%E6%80%BB/leetcode98.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/#98","title":"98.\u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811","text":"<p>\u4e00\u5f00\u59cb\u62ff\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u76f4\u63a5\u52a8\u624b\u4f7f\u7528\u9012\u5f52\u5b8c\u6210\u4e86\uff0c\u5199\u4e0b\u4e86\u4ee5\u4e0b\u9519\u8bef\u4ee3\u7801\uff1a</p> <pre><code>bool isValidBST(struct TreeNode* root) {\n\u00a0 \u00a0 if(root==NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 }else if(root-&gt;left==NULL&amp;&amp;root-&gt;right!=NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 if(isValidBST(root-&gt;right)&amp;&amp;(root-&gt;val&lt;root-&gt;right-&gt;val)){\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 \u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }else if(root-&gt;right==NULL&amp;&amp;root-&gt;left!=NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 if(isValidBST(root-&gt;left)&amp;&amp;(root-&gt;val&gt;root-&gt;left-&gt;val)){\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 \u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }else if(root-&gt;left==NULL&amp;&amp;root-&gt;right==NULL){\n\u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 }\n\u00a0 \u00a0 else if(root-&gt;val&gt;root-&gt;left-&gt;val &amp;&amp; root-&gt;val&lt;root-&gt;right-&gt;val){\n\u00a0 \u00a0 \u00a0 \u00a0 if(isValidBST(root-&gt;left)&amp;&amp;isValidBST(root-&gt;right)){\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return true;\n\u00a0 \u00a0 \u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return false;\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 }else{\n\u00a0 \u00a0 \u00a0 \u00a0 return false;\n    }\n}\n</code></pre> <p>\u8fd9\u6bb5\u4ee3\u7801\u9519\u8bef\u7684\u539f\u56e0\u5f88\u660e\u663e\uff0c\u53ea\u68c0\u67e5\u4e86\u5f53\u524d\u8282\u70b9\u4e0e\u5de6\u53f3\u8282\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u6ca1\u6709\u8003\u8651\u5176\u4e0e\u66f4\u9ad8\u8282\u70b9\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u56e0\u6b64\u6ca1\u6709\u901a\u8fc7\u90e8\u5206\u6d4b\u8bd5\u70b9</p> <p>\u7ecf\u8fc7\u601d\u8003\u540e\uff0c\u60f3\u51fa\u4e86\u4ee5\u4e0b\u6b63\u786e\u7684\u9012\u5f52\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u8f85\u52a9\u7684\u9012\u5f52\u51fd\u6570\uff0c\u5e76\u4f20\u5165\u4e86\u4e24\u4e2along\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u5373\u4e0a\u4e0b\u754c\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u7b2c\u4e00\u6b21\u4f20\u5165\u7684root\u6ca1\u6709\u4e0a\u4e0b\u754c\u7684\u8981\u6c42\uff0c\u6240\u4ee5\u9700\u8981\u5229\u7528<code>#include &lt;limits.h&gt;</code>\u4e2d\u7684<code>LONG_MIN</code>\u548c<code>LONG_MAX</code>\u6765\u83b7\u53d6\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002\u5e76\u4e14\u8fd9\u4e24\u4e2a\u4e1c\u897f\u7684\u6570\u636e\u7c7b\u578b\u662f<code>long</code>\uff0c\u6240\u4ee5\u8981\u6ce8\u610f\u662f<code>long lower</code>\u800c\u4e0d\u662f<code>int lower</code></p> <pre><code>//\u65b9\u6848\u4e00\u2014\u2014\u9012\u5f52\u6cd5\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n#include &lt;limits.h&gt;\nbool whether_subtree_is_BST(struct TreeNode* root,long lower,long upper){\n    if(root==NULL){\n        return true;\n    }else{\n        if(root-&gt;val&gt;lower&amp;&amp;root-&gt;val&lt;upper){\n            return whether_subtree_is_BST(root-&gt;left,lower,root-&gt;val)&amp;&amp;whether_subtree_is_BST(root-&gt;right,root-&gt;val,upper);\n        }\n    }\n    return false;\n}\nbool isValidBST(struct TreeNode* root){\n    return whether_subtree_is_BST(root,LONG_MIN, LONG_MAX);\n}\n</code></pre> <p>\u5199\u5b8c\u4e0a\u8ff0\u4ee3\u7801\u540e\uff0cleetcode\u5df2\u7ecf\u901a\u8fc7\u4e86\uff0c\u4e8e\u662f\u6211\u53c8\u7814\u7a76\u4e86\u4e00\u4e0b\u7b54\u6848\uff0c\u5e0c\u671b\u80fd\u627e\u5230\u66f4\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\u7ecf\u8fc7\u534a\u4e2a\u591a\u5c0f\u65f6\u7684\u7406\u89e3\uff0c\u6211\u53d1\u73b0\u81ea\u5df1\u6f0f\u4e86BST\u7684\u4e00\u4e2a\u91cd\u8981\u7684\u6027\u8d28\uff0c\u90a3\u5c31\u662fBST\u7684\u4e2d\u5e8f\u904d\u5386\u4e00\u5b9a\u662f\u4e25\u683c\u9012\u589e\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u7ed9\u5b9a\u7684\u6811\u8fdb\u884c\u4e2d\u5e8f\u904d\u5386\uff0c\u89c2\u5bdf\u5f97\u5230\u7684\u7ed3\u679c\u662f\u5426\u662f\u4e25\u683c\u5355\u8c03\u9012\u589e\u5373\u53ef\u3002</p> <p>\u7136\u540e\u6211\u5c31\u5f00\u59cb\u5199\u4e86\uff0c\u7ed3\u679c\u5199\u51fa\u4e86\u8fd9\u6837\u4e00\u5927\u5768\u9519\u8bef\u767e\u51fa\u7684\u4ee3\u7801\uff0c\u54ce\uff0c\u679c\u7136\u8fd8\u662f\u8981\u5929\u5929\u7801\u624d\u4f1a\u6709\u624b\u611f\uff0c\u56db\u4e94\u5929\u6ca1\u5199\u4ee3\u7801\u5c31\u53d8\u6210\u8fd9\u6837\u4e86\uff0c\u4f24\u5fc3</p> <pre><code>//\u65b9\u6848\u4e8c\u2014\u2014\u5229\u7528\u4e2d\u5e8f\u904d\u5386\uff08\u9012\u5f52\u7248\uff09\nvoid inorder_traversal(int *a,struct TreeNode* root,int *p){\n    if(root==NULL){\n        return;\n    }\n    inorder_traversal(a,root-&gt;left,(*p)++);             //\u4f20\u5165\u7684\u53c2\u6570\u7c7b\u578b\u4e0d\u5bf9\uff01\uff01\n    a[(*p)++]=root-&gt;val;\n    inorder_traversal(a,root-&gt;right,(*p)++);\n}\nbool judge(int *a,int p){\n    for(int i=0;i&lt;p-1;i++){\n        if(a[i]&gt;=a[i+1]){\n            return false;\n        }\n    }\n    return true;\n}\nbool isValidBST(struct TreeNode* root){\n    int *p;                                             //\u91ce\u6307\u9488\uff01\uff01\n    *p=0;\n    int *a=(int *)malloc(sizeof(int )*10000)\n    inorder_traversal(a,root,p);\n    return judge(a,*p);\n}\n</code></pre> <p>\u9488\u5bf9\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\uff0c\u6211\u5f00\u59cb\u8fdb\u884c\u4fee\u6539\uff0c\u9996\u5148\u662f\u4f20\u5165\u7684\u53c2\u6570\u7c7b\u578b\u95ee\u9898\uff0c\u6211\u4e00\u5f00\u59cb\u8ba4\u4e3a\u6bcf\u6b21\u4f20\u5165\u7684p\u5c31\u662f\u5bf9\u5e94\u6570\u7ec4a\u8981\u586b\u5165\u7684\u6570\u636e\u7684\u5185\u5bb9\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u5e76\u4e0d\u662f\u8fd9\u6837\u7684\uff0c\u5176\u5b9e\u8fd9\u4e2a\u9012\u5f52\u51fd\u6570\u8981\u60f3\u586b\u5165\u6570\u636e\uff0c\u53ea\u80fd\u4f9d\u9760<code>a[(*p)++]=root-&gt;val</code>\u8bed\u53e5\uff0c\u6240\u4ee5\u53ea\u8981\u5728\u8fd9\u91cc\u4ee4p\u81ea\u589e\u5c31\u884c\u4e86\uff1b\u5176\u6b21\u662f\u91ce\u6307\u9488\u7684\u95ee\u9898\uff0c\u6211\u4e00\u5f00\u59cb\u662f\u5e0c\u671b\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u6765\u5b9e\u73b0\u5bf9\u5916\u90e8\u6570\u636e\u7684\u4fee\u6539\u3002\u5176\u5b9e\u53ef\u4ee5\u6362\u4e00\u4e2a\u601d\u8def\uff0c\u4f7f\u7528&amp;\u6765\u53d6\u5730\u5740\u5c31\u884c\u4e86\u3002\u4e0b\u9762\u662f\u4fee\u6539\u540e\u7684\u4ee3\u7801\uff1a</p> <pre><code>// ------------------- \u4f60\u539f\u6765\u7684 inorder_traversal \u51fd\u6570 -------------------\n// \u6211\u53ea\u4fee\u6539\u4e86\u4f60\u7684\u9012\u5f52\u8c03\u7528\uff0c\u5176\u4ed6\u7684\u903b\u8f91\u6682\u65f6\u4e0d\u52a8\nvoid inorder_traversal(int *a, struct TreeNode* root, int *p_count) {\n    if (root == NULL) {\n        return;\n    }\n    // \u4fee\u6539\u4e09\uff1a\u9012\u5f52\u8c03\u7528\u65f6\uff0c\u5fc5\u987b\u4f20\u9012\u6307\u9488p_count\u672c\u8eab\uff01\n    // \u4f60\u539f\u6765\u5199\u7684 (*p_count)++ \u4f1a\u628ap_count\u6307\u5411\u7684\u503c\uff08\u6bd4\u59820\uff09\u4f20\u8fdb\u53bb\uff0c\u800c\u4e0d\u662f\u6307\u9488\u5730\u5740\n    // \u5bfc\u81f4\u4e0b\u4e00\u5c42\u9012\u5f52\u63a5\u6536\u5230NULL\uff0c\u76f4\u63a5\u5d29\u6e83\u3002\u64cd\uff0c\u8fd9\u79cd\u9519\u8bef\u90fd\u80fd\u72af\uff1f\n    inorder_traversal(a, root-&gt;left, p_count);\n    // \u628a\u8282\u70b9\u503c\u5b58\u5165\u6570\u7ec4\uff0c\u7136\u540e\u628a\u8ba1\u6570\u5668\u52a0\u4e00\n    a[(*p_count)] = root-&gt;val;\n    (*p_count)++;\n    inorder_traversal(a, root-&gt;right, p_count);\n}\n// ------------------- \u4f60\u539f\u6765\u7684 judge \u51fd\u6570 -------------------\nbool judge(int *a, int count) {\n    for (int i = 0; i &lt; count - 1; i++) {\n        if (a[i] &gt;= a[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n// ------------------- \u4f60\u539f\u6765\u7684 isValidBST \u4e3b\u51fd\u6570 -------------------\nbool isValidBST(struct TreeNode* root) {\n    // LeetCode\u7684\u8282\u70b9\u4e0a\u9650\u662f10000\uff0c\u6240\u4ee5\u6211\u4eec\u201c\u731c\u201d\u4e00\u4e2a\u5927\u5c0f\u3002\n    // \u8fd9\u5728\u771f\u5b9e\u5de5\u7a0b\u91cc\u662f\u6781\u5176\u50bb\u903c\u7684\u884c\u4e3a\uff0c\u4f46\u4e3a\u4e86\u6ee1\u8db3\u4f60\u8fd9\u4e2a\u70c2\u65b9\u6cd5\uff0c\u53ea\u80fd\u8fd9\u4e48\u5e72\u3002\n    // \u4fee\u6539\u4e8c\uff1a\u6b63\u786e\u7684\u5185\u5b58\u5206\u914d\u3002\u7528sizeof(int)\uff0c\u5e76\u4e14\u7ed9\u4e00\u4e2a\u5177\u4f53\u7684\u3001\u731c\u51fa\u6765\u7684\u6570\u91cf\u3002\n    int *a = (int *)malloc(sizeof(int) * 10001);\n    if (a == NULL) return false; // \u4e25\u8c28\u4e00\u70b9\uff0c\u68c0\u67e5malloc\u662f\u5426\u6210\u529f\n    // \u4fee\u6539\u4e00\uff1a\u5b9a\u4e49\u4e00\u4e2a\u5b9e\u5b9e\u5728\u5728\u7684\u8ba1\u6570\u5668\u53d8\u91cf\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u91ce\u6307\u9488\u3002\n    // \u4f60\u539f\u6765 int *p; *p=0; \u7684\u5199\u6cd5\uff0c\u662f100%\u7684\u6bb5\u9519\u8bef\uff0c\u6559\u79d1\u4e66\u7ea7\u7684\u53cd\u9762\u6848\u4f8b\u3002\n    int count = 0;\n    // \u628acount\u7684\u5730\u5740(&amp;count)\u4f20\u8fdb\u53bb\uff0c\u8fd9\u6837\u51fd\u6570\u5185\u90e8\u624d\u80fd\u4fee\u6539\u5b83\n    inorder_traversal(a, root, &amp;count);\n\n    bool result = judge(a, count);\n\n    // \u522b\u5fd8\u4e86\u91ca\u653e\u4f60\u7533\u8bf7\u7684\u5185\u5b58\uff0c\u4e0d\u7136\u5c31\u662f\u5185\u5b58\u6cc4\u6f0f\u3002\n    // \u4f60\u770b\uff0c\u7528\u6570\u7ec4\u591a\u51e0\u628a\u9ebb\u70e6\u3002\n    free(a);\n\n    return result;\n}\n</code></pre> <p>\u7136\u800c\u4e0a\u8ff0\u7684\u4ee3\u7801\u4ecd\u7136\u5b58\u5728\u7f3a\u9677\uff0c\u663e\u7136\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO\uff08N\uff09\uff0c\u8fd9\u662f\u6211\u4eec\u4e0d\u80fd\u63a5\u53d7\u7684\uff0c\u4e8e\u662f\u6211\u5199\u51fa\u6765\u4e86\u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u4e0b\u9762\u76841234\u6b65\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\uff0c\u5982\u679c\u8fd8\u6709\u7591\u95ee\u7684\u8bdd\u53ef\u4ee5B\u7ad9\u641c\u7d22<code>\u4ee3\u7801\u968f\u60f3\u5f55</code></p> <pre><code>// \u8fd9\u4e2a\u8f85\u52a9\u51fd\u6570\u624d\u662f\u9012\u5f52\u8be5\u6709\u7684\u6837\u5b50\nbool smart_recursive_check(struct TreeNode* node, struct TreeNode** prev) {\n    // \u8d70\u5230\u4e86\u6811\u53f6\u7684\u5c3d\u5934\uff0c\u662f\u6709\u6548\u7684\u90e8\u5206\n    if (node == NULL) {\n        return true;\n    }\n\n    // 1. \u5148\u4e00\u8def\u5411\u5de6\uff0c\u9012\u5f52\u68c0\u67e5\u5de6\u5b50\u6811\n    if (!smart_recursive_check(node-&gt;left, prev)) {\n        return false;\n    }\n\n    // 2. \u5904\u7406\u5f53\u524d\u8282\u70b9\uff08\u4e2d\u5e8f\u904d\u5386\u7684\u6838\u5fc3\u8bbf\u95ee\u70b9\uff09\n\n    if (*prev != NULL &amp;&amp; (*prev)-&gt;val &gt;= node-&gt;val) {\n        return false;\n    }\n\n    *prev = node;\n\n    // 4. \u6700\u540e\u9012\u5f52\u68c0\u67e5\u53f3\u5b50\u6811\n    return smart_recursive_check(node-&gt;right, prev);\n}\n\nbool isValidBST(struct TreeNode* root) {\n    // \u5b9a\u4e49\u4e00\u4e2aprev\u6307\u9488\uff0c\u521d\u59cb\u4e3aNULL\uff0c\u8868\u793a\u8fd8\u6ca1\u6709\u8bbf\u95ee\u8fc7\u4efb\u4f55\u8282\u70b9\n    struct TreeNode* prev = NULL;\n    // \u628aprev\u7684\u5730\u5740\u4f20\u8fdb\u53bb\uff0c\u8fd9\u6837\u8f85\u52a9\u51fd\u6570\u5c31\u80fd\u4fee\u6539\u5b83\u4e86\n    return smart_recursive_check(root, &amp;prev);\n}\n</code></pre> <p>\u8fd9\u662f\u8fed\u4ee3\u7248\uff0c\u8981\u8bb0\u4f4f\uff01\uff01\uff01</p> <pre><code>bool isValidBST(struct TreeNode* root) {\n    long long prev_val = LLONG_MIN;\n    struct TreeNode** stack = (struct TreeNode**)malloc(sizeof(struct TreeNode*) * 10001);\n    if (stack == NULL) return false;\n    int top = -1;\n    struct TreeNode* current = root;\n\n    // \u770b\uff01\u8fd9\uff01\u91cc\uff01\n    // \u7b80\u6d01\uff01\u660e\u4e86\uff01\u6b63\u786e\uff01\n    while (current != NULL || top != -1) { //\u7279\u522b\u662f\u8fd9\u91cc\u7684current!=NULL\u4e00\u5b9a\u8981\u6ce8\u610f\uff01\uff01\n        while (current != NULL) {\n            stack[++top] = current;\n            current = current-&gt;left;\n        }\n        current = stack[top--];\n\n        if (current-&gt;val &lt;= prev_val) {\n            free(stack);\n            return false;\n        }\n\n        prev_val = current-&gt;val;\n        current = current-&gt;right;\n    }\n\n    free(stack);\n    return true;\n}\n</code></pre> <p>\u8fd9\u9053\u9898\u82b1\u4e86\u6211\u5f88\u957f\u65f6\u95f4\uff0c\u8bf4\u660e\u6211\u5bf9\u4e00\u4e9b\u57fa\u7840\u7684\u64cd\u4f5c\u8fd8\u662f\u5b58\u5728\u5f88\u5927\u7684\u95ee\u9898\u7684\uff0c\u8981\u7ee7\u7eed\u52a0\u6cb9\u554a\uff01\uff01</p>"},{"location":"02-HPC/lab1-MiniCluster/reflection/","title":"Reflection","text":""},{"location":"02-HPC/lab1-MiniCluster/reflection/#lab1","title":"lab1 \u5b9e\u9a8c\u5fc3\u5f97","text":"<p>\u4f5c\u4e3a\u4e00\u540d\u6750\u6599\u79d1\u5b66\u4e0e\u5de5\u7a0b\u4e13\u4e1a\u7684\u5927\u4e00\u5b66\u751f\uff0c\u6211\u65e9\u5df2\u4e0b\u5b9a\u51b3\u5fc3\u8f6c\u5411\u8ba1\u7b97\u673a\u79d1\u5b66\u4e0e\u6280\u672f\u4e13\u4e1a\uff0c\u5e76\u4e14\u672c\u5b66\u671f\u6240\u4fee\u7684\u4e13\u4e1a\u8bfe\u7a0b\u4e5f\u90fd\u662f\u8ba1\u79d1\u65b9\u5411\u7684\uff0c\u5982\u300a\u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528\u300b\u3001\u300a\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\u57fa\u7840\u300b(FDS)\u4ee5\u53ca\u300a\u6570\u5b57\u903b\u8f91\u8bbe\u8ba1\u300b\u3002\u56e0\u6b64\uff0c\u672c\u6b21\u201c\u8ff7\u4f60\u8ba1\u7b97\u96c6\u7fa4\u642d\u5efa\u53caHPL\u6027\u80fd\u6d4b\u8bd5\u201d\u5b9e\u9a8c\u5bf9\u6211\u800c\u8a00\uff0c\u662f\u4e00\u6b21\u5168\u65b0\u7684\u3001\u5b8c\u5168\u4ece\u96f6\u5f00\u59cb\u7684\u81ea\u5b66\u63a2\u7d22\u8fc7\u7a0b\u3002</p> <p>\u901a\u8fc7\u8fd9\u6b21\u5b9e\u9a8c\uff0c\u6211\u6df1\u523b\u4f53\u4f1a\u5230\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u9886\u57df\uff0c\u81ea\u4e3b\u5b66\u4e60\u80fd\u529b\u7684\u91cd\u8981\u6027\u3002\u4ece\u6700\u521d\u5bf9 OpenMPI\u3001BLAS\u3001CBLAS\u3001HPL \u8fd9\u4e9b\u4e13\u4e1a\u540d\u8bcd\u7684\u964c\u751f\uff0c\u5230\u7406\u89e3\u5b83\u4eec\u5404\u81ea\u7684\u4f5c\u7528\uff1b\u4ece\u9762\u5bf9\u6e90\u7801\u7f16\u8bd1\u65f6\u5404\u79cd\u9884\u60f3\u4e0d\u5230\u7684\u4f9d\u8d56\u7f3a\u5931\u3001\u914d\u7f6e\u9519\u8bef\u3001\u94fe\u63a5\u95ee\u9898\uff0c\u5230\u5b66\u4f1a\u9605\u8bfb\u9519\u8bef\u4fe1\u606f\u3001\u4e0a\u7f51\u67e5\u627e\u89e3\u51b3\u65b9\u6848\uff08\u4f8b\u5982\u7f16\u8bd1\u5668\u7f3a\u5931\u3001\u5e93\u94fe\u63a5\u987a\u5e8f\u3001Makefile \u53c2\u6570\u542b\u4e49\u7b49\uff09\uff0c\u6bcf\u4e00\u6b65\u90fd\u5145\u6ee1\u4e86\u6311\u6218\u3002</p> <p>\u867d\u7136\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u7684\u8fc7\u7a0b\u6709\u65f6\u786e\u5b9e\u5f88\u201c\u75db\u82e6\u201d\uff0c\u751a\u81f3\u4e00\u5ea6\u8ba9\u6211\u611f\u5230\u6cae\u4e27\uff08\u6bd4\u5982\u591a\u6b21\u5c1d\u8bd5\u4e0b\u8f7dCBLAS\u6e90\u7801\u5305\u5931\u8d25\uff0c\u6216\u8005HPL\u94fe\u63a5\u65f6\u627e\u4e0d\u5230Fortran\u5e93\uff09\uff0c\u4f46\u6bcf\u5f53\u901a\u8fc7\u67e5\u9605\u8d44\u6599\u3001\u7406\u89e3\u539f\u7406\u3001\u52a8\u624b\u5c1d\u8bd5\u5e76\u6700\u7ec8\u653b\u514b\u4e00\u4e2a\u96be\u9898\u65f6\uff0c\u90a3\u79cd\u5b66\u4e60\u5230\u65b0\u77e5\u8bc6\u3001\u638c\u63e1\u65b0\u6280\u80fd\u7684\u6210\u5c31\u611f\u662f\u65e0\u4e0e\u4f26\u6bd4\u7684\u3002\u7279\u522b\u662f\u7ecf\u5386\u201c\u9047\u5230\u56f0\u96be -&gt; \u67e5\u627e\u8d44\u6599/\u6559\u7a0b -&gt; \u5b66\u4e60\u76f8\u5173\u6280\u672f -&gt; \u89e3\u51b3\u95ee\u9898\u201d\u8fd9\u6837\u7684\u5b8c\u6574\u5faa\u73af\u540e\uff0c\u6211\u80fd\u6e05\u6670\u5730\u611f\u89c9\u5230\u81ea\u5df1\u5728\u77e5\u8bc6\u548c\u6280\u80fd\u4e0a\u7684\u98de\u901f\u8fdb\u6b65\uff0c\u5185\u5fc3\u611f\u5230\u975e\u5e38\u5145\u5b9e\u548c\u5f00\u5fc3\u3002\u8fd9\u79cd\u901a\u8fc7\u5b9e\u8df5\u5c06\u7406\u8bba\u77e5\u8bc6\uff08\u6bd4\u5982\u64cd\u4f5c\u7cfb\u7edf\u3001\u7f16\u8bd1\u539f\u7406\u7684\u4e00\u4e9b\u6982\u5ff5\uff09\u4e0e\u5b9e\u9645\u64cd\u4f5c\u7ed3\u5408\u8d77\u6765\u7684\u4f53\u9a8c\uff0c\u8fdc\u6bd4\u5355\u7eaf\u542c\u8bfe\u8981\u6df1\u523b\u5f97\u591a\u3002</p> <p>\u4f8b\u5982\uff0c\u5728\u914d\u7f6eHPL\u7684Makefile\u65f6\uff0c\u7406\u89e3TOPdir, MPdir, MPlib, LAlib, LINKER, F2CDEFS\u7b49\u53c2\u6570\u7684\u542b\u4e49\uff0c\u5e76\u6839\u636e\u81ea\u5df1\u7f16\u8bd1\u7684OpenMPI\u3001BLAS\u3001CBLAS\u7684\u5b9e\u9645\u8def\u5f84\u8fdb\u884c\u6b63\u786e\u586b\u5199\uff0c\u6700\u7ec8\u6210\u529f\u94fe\u63a5\u751f\u6210xhpl\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u8ba9\u6211\u5bf9\u8f6f\u4ef6\u7684\u6784\u5efa\u548c\u4f9d\u8d56\u7ba1\u7406\u6709\u4e86\u66f4\u76f4\u89c2\u7684\u8ba4\u8bc6\u3002\u540c\u6837\uff0c\u5728\u642d\u5efa\u865a\u62df\u673a\u96c6\u7fa4\u65f6\uff0c\u914d\u7f6e\u4e3b\u673a\u540d\u3001/etc/hosts\u3001\u4ee5\u53ca\u65e0\u5bc6\u7801SSH\u767b\u5f55\uff0c\u8ba9\u6211\u5bf9\u8ba1\u7b97\u673a\u7f51\u7edc\u548c\u8282\u70b9\u95f4\u901a\u4fe1\u7684\u57fa\u7840\u6709\u4e86\u66f4\u5b9e\u9645\u7684\u64cd\u4f5c\u7ecf\u9a8c\u3002\u540e\u7eed\u7684HPL\u6027\u80fd\u53c2\u6570\u8c03\u4f18\uff0c\u4e5f\u8ba9\u6211\u521d\u6b65\u63a5\u89e6\u5230\u4e86\u6027\u80fd\u6d4b\u8bd5\u548c\u4f18\u5316\u7684\u57fa\u672c\u601d\u8def\u3002</p> <p>\u603b\u800c\u8a00\u4e4b\uff0c\u8fd9\u6b21\u5b9e\u9a8c\u4e0d\u4ec5\u8ba9\u6211\u6210\u529f\u642d\u5efa\u4e86\u8ff7\u4f60\u96c6\u7fa4\u5e76\u8fd0\u884c\u4e86HPL\uff0c\u66f4\u91cd\u8981\u7684\u662f\u953b\u70bc\u4e86\u6211\u7684\u81ea\u5b66\u80fd\u529b\u3001\u95ee\u9898\u89e3\u51b3\u80fd\u529b\u548c\u52a8\u624b\u5b9e\u8df5\u80fd\u529b\u3002\u867d\u7136\u8fc7\u7a0b\u66f2\u6298\uff0c\u4f46\u6536\u83b7\u5de8\u5927\u3002\u6211\u975e\u5e38\u671f\u5f85\u672a\u6765\u80fd\u6709\u66f4\u591a\u8fd9\u6837\u7684\u673a\u4f1a\uff0c\u7ee7\u7eed\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u9053\u8def\u4e0a\u63a2\u7d22\u548c\u8fdb\u6b65\u3002</p>"},{"location":"03-Notes-and-Thoughts/git%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/","title":"\u4f7f\u7528git\u7684\u5de5\u4f5c\u6d41\u7a0b","text":"<p>1.\u5728main\u5206\u652f\u91cc\u68c0\u67e5\u662f\u5426\u6709\u66f4\u65b0 <code>git checkout main</code></p> <p>2.\u62c9\u53d6\u66f4\u65b0 <code>git pull origin main</code></p> <p>3.\u521b\u5efa\u5e76\u5207\u6362\u5230\u65b0\u5206\u652f <code>git checkout -b \uff08your new branch)</code></p> <p>4.\u5728\u65b0\u5206\u652f\u4e0a\u8fdb\u884c\u4f60\u60f3\u8981\u7684\u64cd\u4f5c</p> <p>5.\u628a\u6240\u6709\u6539\u52a8\u5148\u52a0\u5230\u201c\u5f85\u63d0\u4ea4\u533a\u201d <code>git add .</code></p> <p>6.\u63d0\u4ea4\uff0c\u540e\u9762\u8ddf\u4e0a\u7b80\u77ed\u7684\u8bf4\u660e <code>git commit -m \"whatever you want to note\"</code></p> <p>\u5173\u4e8e\u8bf4\u660e,\u901a\u5e38\u6709\u4ee5\u4e0b\u51e0\u79cd\u89c4\u8303\uff1a</p> <p><code>feat: Add iterative solution for LeetCode 94</code> (feat = \u65b0\u529f\u80fd)</p> <p><code>fix: Correct variable scope error in maxDepth function</code> (fix = \u4fee\u590dbug)</p> <p><code>docs: Update README with repository navigation</code> (docs = \u53ea\u6539\u4e86\u6587\u6863)</p> <p><code>style: Format C code according to Google Style Guide</code> (style = \u4ee3\u7801\u683c\u5f0f)</p> <p><code>refactor: Improve directory structure for better organization</code> (refactor = \u91cd\u6784)</p> <p>7.\u628a\u7ed3\u679c\u63a8\u9001\u5230\u4e91\u7aef <code>git push origin main</code></p> <p>8.\u672c\u5730\u9884\u89c8 <code>mkdocs serve</code></p> <p>9.\u4e00\u952e\u90e8\u7f72\u7f51\u7ad9 <code>mkdocs gh-deploy</code></p>"}]}